{{
  "language": "Solidity",
  "sources": {
    "Auction.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"Ownable.sol\";\nimport \"Pausable.sol\";\nimport \"SafeMath.sol\";\nimport \"IAllocationMinter.sol\";\n\ncontract Auction is Ownable, Pausable {\n    using SafeMath for uint;\n\n    IAllocationMinter public immutable token;\n    bytes32 public immutable allocationRole;\n\n    // project-specific multisig address where raised funds will be sent\n    address payable destAddress;\n\n    uint public secondsPerAuction;\n    uint public currentAuction;\n    uint public currentAuctionEndTime;\n    uint public totalContributed;\n    uint public totalEmitted;\n    uint public ewma;\n\n    // The number of participants in a particular auction.\n    mapping(uint => uint) public auctionMemberCount;\n    // The participants in a particular auction.\n    mapping(uint => address[]) public auctionMembers;\n    // The total units contributed in a particular auction.\n    mapping(uint => uint) public auctionUnits;\n    // The remaining unclaimed units from a particular auction.\n    mapping(uint => uint) public auctionUnitsRemaining;\n    // All tokens auctioned in a paticular auction.\n    mapping(uint => uint) public auctionSupply;\n    // The remaining unclaimed tokens from a particular auction.\n    mapping(uint => uint) public auctionSupplyRemaining;\n    // Participant's remaining (unclaimed) units for a particular auction.\n    mapping(uint => mapping(address => uint)) public auctionMemberUnitsRemaining;\n    // Participant's particular auctions.\n    mapping(address => uint[]) public memberAuctions;\n\n    // Events\n    event NewAuction(uint auction, uint endTime, uint previousAuctionTotal, uint previousAuctionEmission, uint historicEWMA, uint previousAuctionMembers);\n    event Contribution(address indexed payer, address indexed member, uint auction, uint units, uint dailyTotal);\n    event Claim(address indexed caller, address indexed member, uint auction, uint value, uint remaining);\n\n    constructor(address payable daoMultisig, IAllocationMinter token_, bytes32 allocationRole_, uint secondsPerAuction_) {\n        require(address(daoMultisig) != address(0), \"Invalid daoMultisig address\");\n        require(address(token_) != address(0), \"Invalid token_ address\");\n\n        _transferOwnership(daoMultisig);\n\n        token = token_;\n        allocationRole = allocationRole_;\n        destAddress = daoMultisig;\n        secondsPerAuction = secondsPerAuction_;\n        currentAuction = 1;\n        currentAuctionEndTime = block.timestamp + secondsPerAuction;\n        require(token_.allocationMinted(allocationRole_) == 0, \"auction allocation must have a clean slate\");\n        uint256 available = token_.allocationSupplyAt(allocationRole_, currentAuctionEndTime);\n        auctionSupply[currentAuction] = available;\n        auctionSupplyRemaining[currentAuction] = available;\n    }\n\n    function setDestAddress(address payable destAddress_)\n        public\n        onlyOwner()\n    {\n        require(address(destAddress_) != address(0), \"invalid destAddress_\");\n        destAddress = destAddress_;\n    }\n\n    receive()\n        external payable\n        whenNotPaused\n    {\n        _contributeFor(msg.sender);\n    }\n\n    function contributeFor(address member)\n        external payable\n        whenNotPaused\n    {\n        _contributeFor(member);\n    }\n\n    function auctionsContributed(address member)\n        public view\n        returns (uint)\n    {\n        return memberAuctions[member].length;\n    }\n\n    function claim()\n        external\n        whenNotPaused\n        returns (uint value)\n    {\n        _checkpoint();\n        uint length = memberAuctions[msg.sender].length;\n        for (uint i = 0; i < length; ++i) {\n            uint auction = memberAuctions[msg.sender][i];\n            if (auction < currentAuction) {\n                uint memberUnits = auctionMemberUnitsRemaining[auction][msg.sender];\n                if (memberUnits != 0) {\n                    value += _prepareClaim(auction, msg.sender, memberUnits);\n                }\n            }\n        }\n        _mint(msg.sender, value);\n    }\n\n    function emissionShare(uint auction, address member)\n        public view\n        returns (uint value)\n    {\n        uint memberUnits = auctionMemberUnitsRemaining[auction][member];\n        if (memberUnits != 0) {\n            uint totalUnits = auctionUnitsRemaining[auction];\n            uint emissionRemaining = auctionSupplyRemaining[auction];\n            value = (emissionRemaining * memberUnits) / totalUnits;\n        }\n    }\n\n    function impliedPriceEWMA(bool includeCurrent) public view returns (uint) {\n        return ewma == 0 || includeCurrent ? computeEWMA() : ewma;\n    }\n\n    function computeEWMA() public view returns (uint) {\n        uint price = 10**9 * (auctionUnits[currentAuction] / (auctionSupply[currentAuction] / 10**9));\n\t\treturn ewma == 0 ? price : (7 * price + 3 * ewma) / 10; // alpha = 0.7\n    }\n\n    function checkpoint() external {\n        _checkpoint();\n    }\n\n    function pause()\n        public\n        onlyOwner()\n        whenNotPaused\n    {\n        _pause();\n    }\n\n    function unpause()\n        public\n        onlyOwner()\n        whenPaused\n    {\n        _unpause();\n    }\n\n    function _checkpoint()\n        private\n    {\n        if (block.timestamp >= currentAuctionEndTime) {\n            uint units = auctionUnits[currentAuction];\n            uint emission = auctionSupply[currentAuction];\n\t\t\tif (units > 0) {\n\t\t\t\tewma = computeEWMA();\n\t\t\t}\n            uint members = auctionMemberCount[currentAuction];\n            currentAuctionEndTime = block.timestamp + secondsPerAuction;\n            uint256 available = token.allocationSupplyAt(allocationRole, currentAuctionEndTime) - auctionSupply[currentAuction];\n\n            currentAuction += 1;\n            auctionSupply[currentAuction] = available;\n            auctionSupplyRemaining[currentAuction] = available;\n\n            emit NewAuction(currentAuction, currentAuctionEndTime, units, emission, ewma, members);\n        }\n    }\n\n    function _contributeFor(address member)\n        private\n    {\n        require(msg.value > 0, \"ETH required\");\n        _checkpoint();\n        _claimPrior(member);\n        if (auctionMemberUnitsRemaining[currentAuction][member] == 0) {\n            // If hasn't contributed to this Auction yet\n            memberAuctions[member].push(currentAuction);\n            auctionMemberCount[currentAuction] += 1;\n            auctionMembers[currentAuction].push(member);\n        }\n        auctionMemberUnitsRemaining[currentAuction][member] += msg.value;\n        auctionUnits[currentAuction] += msg.value;\n        auctionUnitsRemaining[currentAuction] += msg.value;\n        totalContributed += msg.value;\n        (bool success,) = destAddress.call{value: msg.value}(\"\");\n        require(success, \"\");\n        emit Contribution(msg.sender, member, currentAuction, msg.value, auctionUnits[currentAuction]);\n    }\n\n    function _claimPrior(address member) private {\n        uint i = memberAuctions[member].length;\n        while (i > 0) {\n            --i;\n            uint auction = memberAuctions[member][i];\n            if (auction < currentAuction) {\n                uint units = auctionMemberUnitsRemaining[auction][member];\n                if (units > 0) {\n                    _mint(member, _prepareClaim(auction, member, units));\n                    //\n                    // If a prior auction is found, then it is the only prior auction\n                    // that has not already been withdrawn, so there's nothing left to do.\n                    //\n                    return;\n                }\n            }\n        }\n    }\n\n    function _prepareClaim(uint _auction, address _member, uint memberUnits)\n        private\n        returns (uint value)\n    {\n        uint totalUnits = auctionUnitsRemaining[_auction];\n        uint emissionRemaining = auctionSupplyRemaining[_auction];\n        value = (emissionRemaining * memberUnits) / totalUnits;\n        auctionMemberUnitsRemaining[_auction][_member] = 0; // since it will be withdrawn\n        auctionUnitsRemaining[_auction] = auctionUnitsRemaining[_auction].sub(memberUnits);\n        auctionSupplyRemaining[_auction] = auctionSupplyRemaining[_auction].sub(value);\n        emit Claim(msg.sender, _member, _auction, value, auctionSupplyRemaining[_auction]);\n    }\n    \n    function _mint(address member, uint value)\n        private\n    {\n        token.allocationMint(member, allocationRole, value);\n    }\n}\n"
    },
    "Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "IAllocationMinter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface IAllocationMinter {\n    function allocationSupplyAt(bytes32 role, uint256 timestamp) external view returns (uint256);\n    function allocationAvailable(bytes32 role) external view returns (uint256);\n    function allocationMint(address to, bytes32 role, uint256 amount) external;\n    function allocationMinted(bytes32 role) external view returns (uint256);\n}\n"
    }
  },
  "settings": {
    "evmVersion": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "libraries": {
      "Auction.sol": {}
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}