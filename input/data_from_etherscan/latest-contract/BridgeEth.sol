{"BridgeBase.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \u0027./IERC20.sol\u0027;\r\nimport \u0027./IToken.sol\u0027;\r\n\r\n// Recebe o endereço do token no seu construtor do BridgeBsc ou BridgeEth\r\n// Este contrato serve para duas pontes: ou ele é BridgeEth ou BridgeBsc\r\n// Se ele for bridgeEth tem acesso às funções mint e burn do token eth e vice-versa\r\n// Em geral a ApiBridge deve ser owner deste contrato e este contrato owner do token\r\ncontract BridgeBase {\r\n  // admin address controlled by the bridge api\r\n  // a BridgeApi é o admin\r\n  address public admin;\r\n  \r\n  // pode ser o token na ethereum ou na bsc\r\n  // aqui o smartcontract bridge instancia o token\r\n  IToken public token;\r\n\r\n  address public deadWallet = 0x000000000000000000000000000000000000dEaD;\r\n  \r\n  // evita que a mesma transação seja processada duas vezes.\r\n  uint public nonce;\r\n  \r\n  mapping(uint =\u003e bool) public processedNonces;\r\n\r\n  // fixa o processo se é burn ou mint\r\n  enum Step { Burn, Mint }\r\n  \r\n  event Transfer(\r\n    address from,\r\n    address to,\r\n    uint amount,\r\n    uint date,\r\n    uint nonce,\r\n    Step indexed step\r\n  );\r\n\r\n  // o contrato bridge recebe no construtor o endereço do token que será queimado ou mintado \r\n  // o admin é o msg.sender\r\n  constructor(address _token) {\r\n    // só o admin deste contrato pode chamar a função mint deste contrato\r\n    // \r\n    admin = msg.sender;\r\n    // instancia duas funções do token por meio da interface, ou seja mint e burn\r\n    token = IToken(_token);\r\n  }\r\n\r\n\r\n  // esta função é chamada pelo front\r\n  function burn( uint amount) external {\r\n    \r\n   // transfere para a carteira da morte\r\n    token.transferFrom(msg.sender, deadWallet, amount);\r\n    \r\n    emit Transfer(\r\n      msg.sender,\r\n      deadWallet,\r\n      amount,\r\n      block.timestamp,\r\n      nonce,\r\n      Step.Burn\r\n    );\r\n    nonce++;\r\n  }\r\n\r\n /* apenas a bridge api pode chamar  a função mint da bridge smart contract \r\n e apenas o owner do token pode chamar a função mint do token;\r\n É diferente quem chama a função deste smart contract de quem este smart contract chama\r\n */\r\n   function mint(address to, uint amount, uint otherChainNonce) external {\r\n     \r\n     // o endereço que chama esta função tem que ser o mesmo da bridgeAPI \r\n    require(msg.sender == admin, \u0027only admin\u0027);\r\n    \r\n    require(processedNonces[otherChainNonce] == false, \u0027transfer  processed\u0027);\r\n    processedNonces[otherChainNonce] = true;\r\n    \r\n    // instanciação do token \r\n    // Este contrato tem que ser o owner do token para chamar esta função\r\n    token.mint(amount, to);\r\n    \r\n    emit Transfer(\r\n      // only admin\r\n      msg.sender,\r\n      to,\r\n      amount,\r\n      block.timestamp,\r\n      otherChainNonce,\r\n      Step.Mint\r\n    );\r\n  }\r\n\r\n  function updateAdmin(address newAdmin) external {\r\n    require(msg.sender == admin, \u0027only admin\u0027);\r\n    admin = newAdmin;\r\n  }\r\n}\r\n"},"BridgeEth.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \u0027./BridgeBase.sol\u0027;\r\n\r\ncontract BridgeEth is BridgeBase {\r\n \r\n /* passa o endereço do tokenEth para o construtor\r\n e passa esse endereço para o construtor da bridgeBase\r\n */\r\n  constructor(address token) BridgeBase(token) {}\r\n}\r\n\r\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n"},"IToken.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n// apenas uma interface com duas funções que podem ser compartilhadas por qualquer token\r\n\r\ninterface IToken {\r\n  function mint( uint amount, address to) external;\r\n  function transferFrom(address sender, address recipient, uint256 amount) external;\r\n}\r\n"}}