{{
  "language": "Solidity",
  "sources": {
    "VaultReserve.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.9;\n\nimport \"SafeERC20.sol\";\nimport \"IERC20.sol\";\n\nimport \"IVaultReserve.sol\";\nimport \"Errors.sol\";\n\nimport \"Admin.sol\";\nimport \"Vault.sol\";\n\n/**\n * @notice Contract holding vault reserves\n * @dev ETH reserves are stored under address(0)\n */\ncontract VaultReserve is IVaultReserve, Admin {\n    using SafeERC20 for IERC20;\n\n    mapping(address => bool) private _whitelistedVaults;\n    mapping(address => mapping(address => uint256)) private _balances;\n\n    modifier onlyVault() {\n        require(_whitelistedVaults[msg.sender], Error.UNAUTHORIZED_ACCESS);\n        _;\n    }\n\n    constructor() Admin(msg.sender) {}\n\n    /**\n     * @notice Deposit funds into vault reserve.\n     * @notice Only callable by a whitelisted vault.\n     * @param token Token to deposit.\n     * @param amount Amount to deposit.\n     * @return True if deposit was successful.\n     */\n    function deposit(address token, uint256 amount)\n        external\n        payable\n        override\n        onlyVault\n        returns (bool)\n    {\n        if (token == address(0)) {\n            require(msg.value == amount, Error.INVALID_AMOUNT);\n            _balances[msg.sender][token] += msg.value;\n            return true;\n        }\n        uint256 balance = IERC20(token).balanceOf(address(this));\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n        uint256 newBalance = IERC20(token).balanceOf(address(this));\n        uint256 received = newBalance - balance;\n        require(received >= amount, Error.INVALID_AMOUNT);\n        _balances[msg.sender][token] += received;\n        emit Deposit(msg.sender, token, amount);\n        return true;\n    }\n\n    /**\n     * @notice Withdraw funds from vault reserve.\n     * @notice Only callable by a whitelisted vault.\n     * @param token Token to withdraw.\n     * @param amount Amount to withdraw.\n     * @return True if withdrawal was successful.\n     */\n    function withdraw(address token, uint256 amount) external override onlyVault returns (bool) {\n        uint256 accountBalance = _balances[msg.sender][token];\n        require(accountBalance >= amount, Error.INSUFFICIENT_BALANCE);\n\n        _balances[msg.sender][token] -= amount;\n        if (token == address(0)) {\n            payable(msg.sender).transfer(amount);\n        } else {\n            IERC20(token).safeTransfer(msg.sender, amount);\n        }\n        emit Withdraw(msg.sender, token, amount);\n        return true;\n    }\n\n    /**\n     * @notice Whitelist a new vault.\n     * @notice Only callable by admin.\n     * @param vault Vault to whitelist.\n     * @return True if whitelisting was successful.\n     */\n    function whitelistVault(address vault) external onlyAdmin returns (bool) {\n        require(_whitelistedVaults[vault] == false, Error.ADDRESS_WHITELISTED);\n        _whitelistedVaults[vault] = true;\n        emit VaultListed(vault);\n        return true;\n    }\n\n    /**\n     * @notice Check if a vault is whitelisted.\n     * @param vault Vault to whitelist.\n     * @return If vault is whitelisted.\n     */\n    function isWhitelisted(address vault) public view override returns (bool) {\n        return _whitelistedVaults[vault];\n    }\n\n    /**\n     * @notice Check token balance of a specific vault.\n     * @param vault Vault to check balance of.\n     * @param token Token to check balance in.\n     * @return Token balance of vault.\n     */\n    function getBalance(address vault, address token) public view override returns (uint256) {\n        return _balances[vault][token];\n    }\n}\n"
    },
    "SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"IERC20.sol\";\nimport \"Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "IVaultReserve.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.9;\n\ninterface IVaultReserve {\n    event Deposit(address indexed vault, address indexed token, uint256 amount);\n    event Withdraw(address indexed vault, address indexed token, uint256 amount);\n    event VaultListed(address indexed vault);\n\n    function deposit(address token, uint256 amount) external payable returns (bool);\n\n    function whitelistVault(address vault) external returns (bool);\n\n    function withdraw(address token, uint256 amount) external returns (bool);\n\n    function isWhitelisted(address vault) external view returns (bool);\n\n    function getBalance(address vault, address token) external view returns (uint256);\n}\n"
    },
    "Errors.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.9;\n\n// solhint-disable private-vars-leading-underscore\n\nlibrary Error {\n    string internal constant ADDRESS_WHITELISTED = \"address already whitelisted\";\n    string internal constant ADMIN_ALREADY_SET = \"admin has already been set once\";\n    string internal constant ADDRESS_NOT_WHITELISTED = \"address not whitelisted\";\n    string internal constant ADDRESS_NOT_FOUND = \"address not found\";\n    string internal constant CONTRACT_INITIALIZED = \"contract can only be initialized once\";\n    string internal constant CONTRACT_PAUSED = \"contract is paused\";\n    string internal constant INVALID_AMOUNT = \"invalid amount\";\n    string internal constant INVALID_INDEX = \"invalid index\";\n    string internal constant INVALID_VALUE = \"invalid msg.value\";\n    string internal constant INVALID_SENDER = \"invalid msg.sender\";\n    string internal constant INVALID_TOKEN = \"token address does not match pool's LP token address\";\n    string internal constant INVALID_DECIMALS = \"incorrect number of decimals\";\n    string internal constant INVALID_ARGUMENT = \"invalid argument\";\n    string internal constant INVALID_PARAMETER_VALUE = \"invalid parameter value attempted\";\n    string internal constant INVALID_IMPLEMENTATION = \"invalid pool implementation for given coin\";\n    string internal constant INVALID_POOL_IMPLEMENTATION =\n        \"invalid pool implementation for given coin\";\n    string internal constant INVALID_LP_TOKEN_IMPLEMENTATION =\n        \"invalid LP Token implementation for given coin\";\n    string internal constant INVALID_VAULT_IMPLEMENTATION =\n        \"invalid vault implementation for given coin\";\n    string internal constant INVALID_STAKER_VAULT_IMPLEMENTATION =\n        \"invalid stakerVault implementation for given coin\";\n    string internal constant INSUFFICIENT_BALANCE = \"insufficient balance\";\n    string internal constant ADDRESS_ALREADY_SET = \"Address is already set\";\n    string internal constant INSUFFICIENT_STRATEGY_BALANCE = \"insufficient strategy balance\";\n    string internal constant INSUFFICIENT_FUNDS_RECEIVED = \"insufficient funds received\";\n    string internal constant ROLE_EXISTS = \"role already exists\";\n    string internal constant UNAUTHORIZED_ACCESS = \"unauthorized access\";\n    string internal constant SAME_ADDRESS_NOT_ALLOWED = \"same address not allowed\";\n    string internal constant SELF_TRANSFER_NOT_ALLOWED = \"self-transfer not allowed\";\n    string internal constant ZERO_ADDRESS_NOT_ALLOWED = \"zero address not allowed\";\n    string internal constant ZERO_TRANSFER_NOT_ALLOWED = \"zero transfer not allowed\";\n    string internal constant THRESHOLD_TOO_HIGH = \"threshold is too high, must be under 10\";\n    string internal constant INSUFFICIENT_THRESHOLD = \"insufficient threshold\";\n    string internal constant NO_POSITION_EXISTS = \"no position exists\";\n    string internal constant POSITION_ALREADY_EXISTS = \"position already exists\";\n    string internal constant PROTOCOL_NOT_FOUND = \"protocol not found\";\n    string internal constant TOP_UP_FAILED = \"top up failed\";\n    string internal constant SWAP_PATH_NOT_FOUND = \"swap path not found\";\n    string internal constant UNDERLYING_NOT_SUPPORTED = \"underlying token not supported\";\n    string internal constant NOT_ENOUGH_FUNDS_WITHDRAWN =\n        \"not enough funds were withdrawn from the pool\";\n    string internal constant FAILED_TRANSFER = \"transfer failed\";\n    string internal constant FAILED_MINT = \"mint failed\";\n    string internal constant FAILED_REPAY_BORROW = \"repay borrow failed\";\n    string internal constant FAILED_METHOD_CALL = \"method call failed\";\n    string internal constant NOTHING_TO_CLAIM = \"there is no claimable balance\";\n    string internal constant ERC20_BALANCE_EXCEEDED = \"ERC20: transfer amount exceeds balance\";\n    string internal constant INVALID_MINTER =\n        \"the minter address of the LP token and the pool address do not match\";\n    string internal constant STAKER_VAULT_EXISTS = \"a staker vault already exists for the token\";\n    string internal constant DEADLINE_NOT_ZERO = \"deadline must be 0\";\n    string internal constant DEADLINE_NOT_SET = \"deadline is 0\";\n    string internal constant DEADLINE_NOT_REACHED = \"deadline has not been reached yet\";\n    string internal constant DELAY_TOO_SHORT = \"delay be at least 3 days\";\n    string internal constant INSUFFICIENT_UPDATE_BALANCE =\n        \"insufficient funds for updating the position\";\n    string internal constant SAME_AS_CURRENT = \"value must be different to existing value\";\n    string internal constant NOT_CAPPED = \"the pool is not currently capped\";\n    string internal constant ALREADY_CAPPED = \"the pool is already capped\";\n    string internal constant EXCEEDS_DEPOSIT_CAP = \"deposit exceeds deposit cap\";\n    string internal constant VALUE_TOO_LOW_FOR_GAS = \"value too low to cover gas\";\n    string internal constant NOT_ENOUGH_FUNDS = \"not enough funds to withdraw\";\n    string internal constant ESTIMATED_GAS_TOO_HIGH = \"too much ETH will be used for gas\";\n    string internal constant DEPOSIT_FAILED = \"deposit failed\";\n    string internal constant GAS_TOO_HIGH = \"too much ETH used for gas\";\n    string internal constant GAS_BANK_BALANCE_TOO_LOW = \"not enough ETH in gas bank to cover gas\";\n    string internal constant INVALID_TOKEN_TO_ADD = \"Invalid token to add\";\n    string internal constant INVALID_TOKEN_TO_REMOVE = \"token can not be removed\";\n    string internal constant TIME_DELAY_NOT_EXPIRED = \"time delay not expired yet\";\n    string internal constant UNDERLYING_NOT_WITHDRAWABLE =\n        \"pool does not support additional underlying coins to be withdrawn\";\n    string internal constant STRATEGY_SHUT_DOWN = \"Strategy is shut down\";\n    string internal constant STRATEGY_DOES_NOT_EXIST = \"Strategy does not exist\";\n    string internal constant UNSUPPORTED_UNDERLYING = \"Underlying not supported\";\n    string internal constant NO_DEX_SET = \"no dex has been set for token\";\n    string internal constant INVALID_TOKEN_PAIR = \"invalid token pair\";\n    string internal constant TOKEN_NOT_USABLE = \"token not usable for the specific action\";\n    string internal constant ADDRESS_NOT_ACTION = \"address is not registered action\";\n    string internal constant INVALID_SLIPPAGE_TOLERANCE = \"Invalid slippage tolerance\";\n    string internal constant POOL_NOT_PAUSED = \"Pool must be paused to withdraw from reserve\";\n    string internal constant INTERACTION_LIMIT = \"Max of one deposit and withdraw per block\";\n    string internal constant GAUGE_EXISTS = \"Gauge already exists\";\n    string internal constant GAUGE_DOES_NOT_EXIST = \"Gauge does not exist\";\n    string internal constant EXCEEDS_MAX_BOOST = \"Not allowed to exceed maximum boost on Convex\";\n    string internal constant PREPARED_WITHDRAWAL =\n        \"Cannot relock funds when withdrawal is being prepared\";\n    string internal constant ASSET_NOT_SUPPORTED = \"Asset not supported\";\n    string internal constant STALE_PRICE = \"Price is stale\";\n    string internal constant NEGATIVE_PRICE = \"Price is negative\";\n    string internal constant NOT_ENOUGH_BKD_STAKED = \"Not enough BKD tokens staked\";\n}\n"
    },
    "Admin.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.9;\n\nimport \"AdminBase.sol\";\n\ncontract Admin is AdminBase {\n    constructor(address _admin) {\n        _addAdmin(_admin);\n    }\n}\n"
    },
    "AdminBase.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.9;\n\nimport \"EnumerableSet.sol\";\n\nimport \"Errors.sol\";\nimport \"IAdmin.sol\";\n\nabstract contract AdminBase is IAdmin {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    EnumerableSet.AddressSet internal _admins;\n\n    /**\n     * @notice Make a function only callable by admins.\n     * @dev Fails if msg.sender is not an admin.\n     */\n    modifier onlyAdmin() {\n        require(isAdmin(msg.sender), Error.UNAUTHORIZED_ACCESS);\n        _;\n    }\n\n    /**\n     * @notice Remove msg.sender from admin list.\n     * @return `true` if sucessful.\n     */\n    function renounceAdmin() external override onlyAdmin returns (bool) {\n        _admins.remove(msg.sender);\n        emit AdminRenounced(msg.sender);\n        return true;\n    }\n\n    /**\n     * @notice Add a new admin.\n     * @dev This fails if the newAdmin was added previously.\n     * @param newAdmin Address to add as admin.\n     * @return `true` if successful.\n     */\n    function addAdmin(address newAdmin) public override onlyAdmin returns (bool) {\n        require(_addAdmin(newAdmin), Error.ROLE_EXISTS);\n        return true;\n    }\n\n    /**\n     * @return a list of all admins for this contract\n     */\n    function admins() public view override returns (address[] memory) {\n        uint256 len = _admins.length();\n        address[] memory allAdmins = new address[](len);\n        for (uint256 i = 0; i < len; i++) {\n            allAdmins[i] = _admins.at(i);\n        }\n        return allAdmins;\n    }\n\n    /**\n     * @notice Check if an account is admin.\n     * @param account Address to check.\n     * @return `true` if account is an admin.\n     */\n    function isAdmin(address account) public view override returns (bool) {\n        return _isAdmin(account);\n    }\n\n    function _addAdmin(address newAdmin) internal returns (bool) {\n        if (_admins.add(newAdmin)) {\n            emit NewAdminAdded(newAdmin);\n            return true;\n        }\n        return false;\n    }\n\n    function _isAdmin(address account) internal view returns (bool) {\n        return _admins.contains(account);\n    }\n}\n"
    },
    "EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "IAdmin.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.9;\n\ninterface IAdmin {\n    event NewAdminAdded(address newAdmin);\n    event AdminRenounced(address oldAdmin);\n\n    function admins() external view returns (address[] memory);\n\n    function addAdmin(address newAdmin) external returns (bool);\n\n    function renounceAdmin() external returns (bool);\n\n    function isAdmin(address account) external view returns (bool);\n}\n"
    },
    "Vault.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.9;\n\nimport \"SafeERC20.sol\";\nimport \"Initializable.sol\";\nimport \"IERC20.sol\";\n\nimport \"ILiquidityPool.sol\";\nimport \"IVault.sol\";\nimport \"IVaultReserve.sol\";\nimport \"IController.sol\";\nimport \"IStrategy.sol\";\n\nimport \"ScaledMath.sol\";\nimport \"Errors.sol\";\nimport \"EnumerableExtensions.sol\";\nimport \"AddressProviderHelpers.sol\";\n\nimport \"VaultStorage.sol\";\nimport \"Preparable.sol\";\nimport \"IPausable.sol\";\nimport \"AdminUpgradeable.sol\";\n\nabstract contract Vault is IVault, AdminUpgradeable, VaultStorageV1, Preparable, Initializable {\n    using ScaledMath for uint256;\n    using SafeERC20 for IERC20;\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using EnumerableExtensions for EnumerableSet.AddressSet;\n    using EnumerableMapping for EnumerableMapping.AddressToUintMap;\n    using EnumerableExtensions for EnumerableMapping.AddressToUintMap;\n    using AddressProviderHelpers for IAddressProvider;\n\n    bytes32 internal constant _STRATEGY_KEY = \"Strategy\";\n    bytes32 internal constant _PERFORMANCE_FEE_KEY = \"PerformanceFee\";\n    bytes32 internal constant _STRATEGIST_FEE_KEY = \"StrategistFee\";\n    bytes32 internal constant _DEBT_LIMIT_KEY = \"DebtLimit\";\n    bytes32 internal constant _TARGET_ALLOCATION_KEY = \"TargetAllocation\";\n    bytes32 internal constant _RESERVE_FEE_KEY = \"ReserveFee\";\n    bytes32 internal constant _BOUND_KEY = \"Bound\";\n\n    uint256 internal constant _INITIAL_RESERVE_FEE = DECIMAL_SCALE / 100;\n    uint256 internal constant _INITIAL_STRATEGIST_FEE = DECIMAL_SCALE / 10;\n    uint256 internal constant _INITIAL_PERFORMANCE_FEE = (DECIMAL_SCALE * 5) / 100;\n\n    uint256 public constant DECIMAL_SCALE = 1e18;\n    uint256 public constant MAX_PERFORMANCE_FEE = 0.5e18;\n    uint256 public constant MAX_DEVIATION_BOUND = 0.5e18;\n    uint256 public constant STRATEGY_DELAY = 5 days;\n\n    IController public immutable controller;\n    IVaultReserve public immutable reserve;\n\n    constructor(address _controller) {\n        controller = IController(_controller);\n        reserve = IVaultReserve(IController(_controller).addressProvider().getVaultReserve());\n    }\n\n    function initialize(\n        address _pool,\n        uint256 _debtLimit,\n        uint256 _targetAllocation,\n        uint256 _bound\n    ) external virtual override initializer {\n        require(_debtLimit <= DECIMAL_SCALE, Error.INVALID_AMOUNT);\n        require(_targetAllocation <= DECIMAL_SCALE, Error.INVALID_AMOUNT);\n        require(_bound <= MAX_DEVIATION_BOUND, Error.INVALID_AMOUNT);\n\n        _initializeAdmin(msg.sender);\n        pool = _pool;\n\n        _setConfig(_DEBT_LIMIT_KEY, _debtLimit);\n        _setConfig(_TARGET_ALLOCATION_KEY, _targetAllocation);\n        _setConfig(_BOUND_KEY, _bound);\n        _setConfig(_RESERVE_FEE_KEY, _INITIAL_RESERVE_FEE);\n        _setConfig(_STRATEGIST_FEE_KEY, _INITIAL_STRATEGIST_FEE);\n        _setConfig(_PERFORMANCE_FEE_KEY, _INITIAL_PERFORMANCE_FEE);\n    }\n\n    /**\n     * @notice Handles deposits from the liquidity pool\n     */\n    function deposit() external payable override onlyAdmin {\n        _deposit();\n    }\n\n    /**\n     * @notice Withdraws specified amount of underlying from vault.\n     * @dev If the specified amount exceeds idle funds, an amount of funds is withdrawn\n     *      from the strategy such that it will achieve a target allocation for after the\n     *      amount has been withdrawn.\n     * @param amount Amount to withdraw.\n     * @return `true` if successful.\n     */\n    function withdraw(uint256 amount) external override onlyAdmin returns (bool) {\n        IStrategy strategy = getStrategy();\n        uint256 availableUnderlying_ = _availableUnderlying();\n\n        if (availableUnderlying_ < amount) {\n            if (address(strategy) == address(0)) return false;\n            uint256 allocated = strategy.balance();\n            uint256 requiredWithdrawal = amount - availableUnderlying_;\n\n            if (requiredWithdrawal > allocated) return false;\n\n            // compute withdrawal amount to sustain target allocation\n            uint256 newTarget = (allocated - requiredWithdrawal).scaledMul(getTargetAllocation());\n            uint256 excessAmount = allocated - newTarget;\n            strategy.withdraw(excessAmount);\n            currentAllocated = _computeNewAllocated(currentAllocated, excessAmount);\n        } else {\n            uint256 allocatedUnderlying = 0;\n            if (address(strategy) != address(0))\n                allocatedUnderlying = IStrategy(strategy).balance();\n            uint256 totalUnderlying = availableUnderlying_ +\n                allocatedUnderlying +\n                waitingForRemovalAllocated;\n            uint256 totalUnderlyingAfterWithdraw = totalUnderlying - amount;\n            _rebalance(totalUnderlyingAfterWithdraw, allocatedUnderlying);\n        }\n\n        _transfer(pool, amount);\n        return true;\n    }\n\n    /**\n     * @notice Withdraws all funds from vault and strategy and transfer them to the pool.\n     */\n    function withdrawAll() external override onlyAdmin {\n        withdrawAllFromStrategy();\n        uint256 balance = _availableUnderlying();\n        _transfer(pool, balance);\n    }\n\n    /**\n     * @notice Withdraws specified amount of underlying from reserve to vault.\n     * @dev Withdraws from reserve will cause a spike in pool exchange rate.\n     *  Pool deposits should be paused during this to prevent front running\n     * @param amount Amount to withdraw.\n     */\n    function withdrawFromReserve(uint256 amount) external override onlyAdmin {\n        require(amount > 0, Error.INVALID_AMOUNT);\n        require(IPausable(pool).isPaused(), Error.POOL_NOT_PAUSED);\n        uint256 reserveBalance_ = _reserveBalance();\n        require(amount <= reserveBalance_, Error.INSUFFICIENT_BALANCE);\n        reserve.withdraw(getUnderlying(), amount);\n    }\n\n    /**\n     * @notice Activate the current strategy set for the vault.\n     * @return `true` if strategy has been activated\n     */\n    function activateStrategy() external onlyAdmin returns (bool) {\n        return _activateStrategy();\n    }\n\n    /**\n     * @notice Deactivates a strategy.\n     * @return `true` if strategy has been deactivated\n     */\n    function deactivateStrategy() external onlyAdmin returns (bool) {\n        return _deactivateStrategy();\n    }\n\n    /**\n     * @notice Initializes the vault's strategy.\n     * @dev Bypasses the time delay, but can only be called if strategy is not set already.\n     * @param strategy_ Address of the strategy.\n     * @return `true` if successful.\n     */\n    function initializeStrategy(address strategy_) external override onlyAdmin returns (bool) {\n        require(currentAddresses[_STRATEGY_KEY] == address(0), Error.ADDRESS_ALREADY_SET);\n        require(strategy_ != address(0), Error.ZERO_ADDRESS_NOT_ALLOWED);\n        _setConfig(_STRATEGY_KEY, strategy_);\n        _activateStrategy();\n        address strategist_ = IStrategy(strategy_).strategist();\n        require(strategist_ != address(0), Error.ZERO_ADDRESS_NOT_ALLOWED);\n        strategist = strategist_;\n        emit NewStrategist(strategist_);\n        return true;\n    }\n\n    /**\n     * @notice Prepare update of the vault's strategy (with time delay enforced).\n     * @param newStrategy Address of the new strategy.\n     * @return `true` if successful.\n     */\n    function prepareNewStrategy(address newStrategy) external onlyAdmin returns (bool) {\n        return _prepare(_STRATEGY_KEY, newStrategy, STRATEGY_DELAY);\n    }\n\n    /**\n     * @notice Execute strategy update (with time delay enforced).\n     * @dev Needs to be called after the update was prepraed. Fails if called before time delay is met.\n     * @return New strategy address.\n     */\n    function executeNewStrategy() external returns (address) {\n        _executeDeadline(_STRATEGY_KEY);\n        IStrategy strategy = getStrategy();\n        if (address(strategy) != address(0)) {\n            harvest();\n            strategy.shutdown();\n            strategy.withdrawAll();\n\n            // there might still be some balance left if the strategy did not\n            // manage to withdraw all funds (e.g. due to locking)\n            uint256 remainingStrategyBalance = strategy.balance();\n            if (remainingStrategyBalance > 0) {\n                _strategiesWaitingForRemoval.set(address(strategy), remainingStrategyBalance);\n                waitingForRemovalAllocated += remainingStrategyBalance;\n            }\n        }\n        _deactivateStrategy();\n        currentAllocated = 0;\n        totalDebt = 0;\n        address newStrategy = pendingAddresses[_STRATEGY_KEY];\n        _setConfig(_STRATEGY_KEY, newStrategy);\n\n        address newStrategist;\n\n        if (newStrategy == address(0)) {\n            newStrategist = address(0);\n        } else {\n            newStrategist = IStrategy(newStrategy).strategist();\n            _activateStrategy();\n        }\n\n        if (newStrategist != strategist) {\n            strategist = newStrategist;\n            emit NewStrategist(newStrategist);\n        }\n\n        return newStrategy;\n    }\n\n    function resetNewStrategy() external onlyAdmin returns (bool) {\n        return _resetAddressConfig(_STRATEGY_KEY);\n    }\n\n    /**\n     * @notice Prepare update of performance fee (with time delay enforced).\n     * @param newPerformanceFee New performance fee value.\n     * @return `true` if successful.\n     */\n    function preparePerformanceFee(uint256 newPerformanceFee) external onlyAdmin returns (bool) {\n        require(newPerformanceFee <= MAX_PERFORMANCE_FEE, Error.INVALID_AMOUNT);\n        return _prepare(_PERFORMANCE_FEE_KEY, newPerformanceFee);\n    }\n\n    /**\n     * @notice Execute update of performance fee (with time delay enforced).\n     * @dev Needs to be called after the update was prepraed. Fails if called before time delay is met.\n     * @return New performance fee.\n     */\n    function executePerformanceFee() external returns (uint256) {\n        return _executeUInt256(_PERFORMANCE_FEE_KEY);\n    }\n\n    function resetPerformanceFee() external onlyAdmin returns (bool) {\n        return _resetUInt256Config(_PERFORMANCE_FEE_KEY);\n    }\n\n    /**\n     * @notice Prepare update of strategist fee (with time delay enforced).\n     * @param newStrategistFee New strategist fee value.\n     * @return `true` if successful.\n     */\n    function prepareStrategistFee(uint256 newStrategistFee) external onlyAdmin returns (bool) {\n        _checkFeesInvariant(getReserveFee(), newStrategistFee);\n        return _prepare(_STRATEGIST_FEE_KEY, newStrategistFee);\n    }\n\n    /**\n     * @notice Execute update of strategist fee (with time delay enforced).\n     * @dev Needs to be called after the update was prepraed. Fails if called before time delay is met.\n     * @return New strategist fee.\n     */\n    function executeStrategistFee() external returns (uint256) {\n        uint256 newStrategistFee = _executeUInt256(_STRATEGIST_FEE_KEY);\n        _checkFeesInvariant(getReserveFee(), newStrategistFee);\n        return newStrategistFee;\n    }\n\n    function resetStrategistFee() external onlyAdmin returns (bool) {\n        return _resetUInt256Config(_STRATEGIST_FEE_KEY);\n    }\n\n    /**\n     * @notice Prepare update of debt limit (with time delay enforced).\n     * @param newDebtLimit New debt limit.\n     * @return `true` if successful.\n     */\n    function prepareDebtLimit(uint256 newDebtLimit) external onlyAdmin returns (bool) {\n        return _prepare(_DEBT_LIMIT_KEY, newDebtLimit);\n    }\n\n    /**\n     * @notice Execute update of debt limit (with time delay enforced).\n     * @dev Needs to be called after the update was prepraed. Fails if called before time delay is met.\n     * @return New debt limit.\n     */\n    function executeDebtLimit() external returns (uint256) {\n        uint256 debtLimit = _executeUInt256(_DEBT_LIMIT_KEY);\n        uint256 debtLimitAllocated = currentAllocated.scaledMul(debtLimit);\n        if (totalDebt >= debtLimitAllocated) {\n            _handleExcessDebt();\n        }\n        return debtLimit;\n    }\n\n    function resetDebtLimit() external onlyAdmin returns (bool) {\n        return _resetUInt256Config(_DEBT_LIMIT_KEY);\n    }\n\n    /**\n     * @notice Prepare update of target allocation (with time delay enforced).\n     * @param newTargetAllocation New target allocation.\n     * @return `true` if successful.\n     */\n    function prepareTargetAllocation(uint256 newTargetAllocation)\n        external\n        onlyAdmin\n        returns (bool)\n    {\n        return _prepare(_TARGET_ALLOCATION_KEY, newTargetAllocation);\n    }\n\n    /**\n     * @notice Execute update of target allocation (with time delay enforced).\n     * @dev Needs to be called after the update was prepraed. Fails if called before time delay is met.\n     * @return New target allocation.\n     */\n    function executeTargetAllocation() external returns (uint256) {\n        uint256 targetAllocation = _executeUInt256(_TARGET_ALLOCATION_KEY);\n        _deposit();\n        return targetAllocation;\n    }\n\n    function resetTargetAllocation() external onlyAdmin returns (bool) {\n        return _resetUInt256Config(_TARGET_ALLOCATION_KEY);\n    }\n\n    /**\n     * @notice Prepare update of reserve fee (with time delay enforced).\n     * @param newReserveFee New reserve fee.\n     * @return `true` if successful.\n     */\n    function prepareReserveFee(uint256 newReserveFee) external onlyAdmin returns (bool) {\n        _checkFeesInvariant(newReserveFee, getStrategistFee());\n        return _prepare(_RESERVE_FEE_KEY, newReserveFee);\n    }\n\n    /**\n     * @notice Execute update of reserve fee (with time delay enforced).\n     * @dev Needs to be called after the update was prepraed. Fails if called before time delay is met.\n     * @return New reserve fee.\n     */\n    function executeReserveFee() external returns (uint256) {\n        uint256 newReserveFee = _executeUInt256(_RESERVE_FEE_KEY);\n        _checkFeesInvariant(newReserveFee, getStrategistFee());\n        return newReserveFee;\n    }\n\n    function resetReserveFee() external onlyAdmin returns (bool) {\n        return _resetUInt256Config(_RESERVE_FEE_KEY);\n    }\n\n    /**\n     * @notice Prepare update of deviation bound for strategy allocation (with time delay enforced).\n     * @param newBound New deviation bound for target allocation.\n     * @return `true` if successful.\n     */\n    function prepareBound(uint256 newBound) external onlyAdmin returns (bool) {\n        require(newBound <= MAX_DEVIATION_BOUND, Error.INVALID_AMOUNT);\n        return _prepare(_BOUND_KEY, newBound);\n    }\n\n    /**\n     * @notice Execute update of deviation bound for strategy allocation (with time delay enforced).\n     * @dev Needs to be called after the update was prepraed. Fails if called before time delay is met.\n     * @return New deviation bound.\n     */\n    function executeBound() external returns (uint256) {\n        uint256 bound = _executeUInt256(_BOUND_KEY);\n        _deposit();\n        return bound;\n    }\n\n    function resetBound() external onlyAdmin returns (bool) {\n        return _resetUInt256Config(_BOUND_KEY);\n    }\n\n    /**\n     * @notice Withdraws an amount of underlying from the strategy to the vault.\n     * @param amount Amount of underlying to withdraw.\n     * @return True if successful withdrawal.\n     */\n    function withdrawFromStrategy(uint256 amount) external onlyAdmin returns (bool) {\n        IStrategy strategy = getStrategy();\n        if (address(strategy) == address(0)) return false;\n        if (strategy.balance() < amount) return false;\n        uint256 oldBalance = _availableUnderlying();\n        strategy.withdraw(amount);\n        uint256 newBalance = _availableUnderlying();\n        currentAllocated -= newBalance - oldBalance;\n        return true;\n    }\n\n    function withdrawFromStrategyWaitingForRemoval(address strategy) external returns (uint256) {\n        (bool exists, uint256 allocated) = _strategiesWaitingForRemoval.tryGet(strategy);\n        require(exists, Error.STRATEGY_DOES_NOT_EXIST);\n\n        IStrategy istrategy = IStrategy(strategy);\n\n        istrategy.harvest();\n        uint256 withdrawn = istrategy.withdrawAll();\n\n        uint256 _waitingForRemovalAllocated = waitingForRemovalAllocated;\n        if (withdrawn >= _waitingForRemovalAllocated) {\n            waitingForRemovalAllocated = 0;\n        } else {\n            waitingForRemovalAllocated = _waitingForRemovalAllocated - withdrawn;\n        }\n\n        if (withdrawn > allocated) {\n            uint256 profit = withdrawn - allocated;\n            uint256 strategistShare = _shareFees(profit.scaledMul(getPerformanceFee()));\n            if (strategistShare > 0) {\n                _payStrategist(strategistShare, istrategy.strategist());\n            }\n            allocated = 0;\n            emit Harvest(profit, 0);\n        } else {\n            allocated -= withdrawn;\n        }\n\n        if (istrategy.balance() == 0) {\n            _strategiesWaitingForRemoval.remove(strategy);\n        } else {\n            _strategiesWaitingForRemoval.set(strategy, allocated);\n        }\n\n        return withdrawn;\n    }\n\n    function getStrategiesWaitingForRemoval() external view returns (address[] memory) {\n        return _strategiesWaitingForRemoval.keysArray();\n    }\n\n    /**\n     * @notice Computes the total underlying of the vault: idle funds + allocated funds - debt\n     * @return Total amount of underlying.\n     */\n    function getTotalUnderlying() external view override returns (uint256) {\n        IStrategy strategy = getStrategy();\n        uint256 availableUnderlying_ = _availableUnderlying();\n\n        if (address(strategy) == address(0)) {\n            return availableUnderlying_;\n        }\n\n        uint256 netUnderlying = availableUnderlying_ +\n            currentAllocated +\n            waitingForRemovalAllocated;\n        if (totalDebt <= netUnderlying) return netUnderlying - totalDebt;\n        return 0;\n    }\n\n    function getAllocatedToStrategyWaitingForRemoval(address strategy)\n        external\n        view\n        returns (uint256)\n    {\n        return _strategiesWaitingForRemoval.get(strategy);\n    }\n\n    /**\n     * @notice Withdraws all funds from strategy to vault.\n     * @dev Harvests profits before withdrawing. Deactivates strategy after withdrawing.\n     * @return `true` if successful.\n     */\n    function withdrawAllFromStrategy() public onlyAdmin returns (bool) {\n        IStrategy strategy = getStrategy();\n        if (address(strategy) == address(0)) return false;\n        harvest();\n        uint256 oldBalance = _availableUnderlying();\n        strategy.withdrawAll();\n        uint256 newBalance = _availableUnderlying();\n        uint256 withdrawnAmount = newBalance - oldBalance;\n\n        currentAllocated = _computeNewAllocated(currentAllocated, withdrawnAmount);\n        _deactivateStrategy();\n        return true;\n    }\n\n    /**\n     * @notice Harvest profits from the vault's strategy.\n     * @dev Harvesting adds profits to the vault's balance and deducts fees.\n     *  No performance fees are charged on profit used to repay debt.\n     * @return `true` if successful.\n     */\n    function harvest() public onlyAdmin returns (bool) {\n        IStrategy strategy = getStrategy();\n        if (address(strategy) == address(0)) {\n            return false;\n        }\n\n        strategy.harvest();\n\n        uint256 strategistShare = 0;\n\n        uint256 allocatedUnderlying = strategy.balance();\n        uint256 amountAllocated = currentAllocated;\n        uint256 currentDebt = totalDebt;\n\n        if (allocatedUnderlying > amountAllocated) {\n            // we made profits\n            uint256 profit = allocatedUnderlying - amountAllocated;\n\n            if (profit > currentDebt) {\n                if (currentDebt > 0) {\n                    profit -= currentDebt;\n                    currentDebt = 0;\n                }\n                (profit, strategistShare) = _shareProfit(profit);\n            } else {\n                currentDebt -= profit;\n            }\n            emit Harvest(profit, 0);\n        } else if (allocatedUnderlying < amountAllocated) {\n            // we made a loss\n            uint256 loss = amountAllocated - allocatedUnderlying;\n            currentDebt += loss;\n\n            // check debt limit and withdraw funds if exceeded\n            uint256 debtLimit = getDebtLimit();\n            uint256 debtLimitAllocated = amountAllocated.scaledMul(debtLimit);\n            if (currentDebt > debtLimitAllocated) {\n                currentDebt = _handleExcessDebt(currentDebt);\n            }\n            emit Harvest(0, loss);\n        } else {\n            // nothing to declare\n            return true;\n        }\n\n        totalDebt = currentDebt;\n        currentAllocated = strategy.balance();\n\n        if (strategistShare > 0) {\n            _payStrategist(strategistShare);\n        }\n\n        return true;\n    }\n\n    /**\n     * @notice Returns the percentage of the performance fee that goes to the strategist.\n     */\n    function getStrategistFee() public view returns (uint256) {\n        return currentUInts256[_STRATEGIST_FEE_KEY];\n    }\n\n    function getStrategy() public view override returns (IStrategy) {\n        return IStrategy(currentAddresses[_STRATEGY_KEY]);\n    }\n\n    /**\n     * @notice Returns the percentage of the performance fee which is allocated to the vault reserve\n     */\n    function getReserveFee() public view returns (uint256) {\n        return currentUInts256[_RESERVE_FEE_KEY];\n    }\n\n    /**\n     * @notice Returns the fee charged on a strategy's generated profits.\n     * @dev The strategist is paid in LP tokens, while the remainder of the profit stays in the vault.\n     *      Default performance fee is set to 5% of harvested profits.\n     */\n    function getPerformanceFee() public view returns (uint256) {\n        return currentUInts256[_PERFORMANCE_FEE_KEY];\n    }\n\n    /**\n     * @notice Returns the allowed symmetric bound for target allocation (e.g. +- 5%)\n     */\n    function getBound() public view returns (uint256) {\n        return currentUInts256[_BOUND_KEY];\n    }\n\n    /**\n     * @notice The target percentage of total underlying funds to be allocated towards a strategy.\n     * @dev this is to reduce gas costs. Withdrawals first come from idle funds and can therefore\n     *      avoid unnecessary gas costs.\n     */\n    function getTargetAllocation() public view returns (uint256) {\n        return currentUInts256[_TARGET_ALLOCATION_KEY];\n    }\n\n    /**\n     * @notice The debt limit that the total debt of a strategy may not exceed.\n     */\n    function getDebtLimit() public view returns (uint256) {\n        return currentUInts256[_DEBT_LIMIT_KEY];\n    }\n\n    function getUnderlying() public view virtual override returns (address);\n\n    function _activateStrategy() internal returns (bool) {\n        IStrategy strategy = getStrategy();\n        if (address(strategy) == address(0)) return false;\n\n        strategyActive = true;\n        emit StrategyActivated(address(strategy));\n        _deposit();\n        return true;\n    }\n\n    function _handleExcessDebt(uint256 currentDebt) internal returns (uint256) {\n        uint256 underlyingReserves = _reserveBalance();\n        if (currentDebt > underlyingReserves) {\n            _emergencyStop(underlyingReserves);\n        } else {\n            reserve.withdraw(getUnderlying(), currentDebt);\n            currentDebt = 0;\n            _deposit();\n        }\n        return currentDebt;\n    }\n\n    function _handleExcessDebt() internal {\n        uint256 currentDebt = totalDebt;\n        uint256 newDebt = _handleExcessDebt(totalDebt);\n        if (currentDebt != newDebt) {\n            totalDebt = newDebt;\n        }\n    }\n\n    /**\n     * @notice Invest the underlying money in the vault after a deposit from the pool is made.\n     * @dev After each deposit, the vault checks whether it needs to rebalance underlying funds allocated to strategy.\n     * If no strategy is set then all deposited funds will be idle.\n     */\n    function _deposit() internal {\n        if (!strategyActive) return;\n\n        uint256 availableUnderlying_ = _availableUnderlying();\n        uint256 allocatedUnderlying = getStrategy().balance();\n        uint256 totalUnderlying = availableUnderlying_ +\n            allocatedUnderlying +\n            waitingForRemovalAllocated;\n\n        if (totalUnderlying == 0) return;\n        _rebalance(totalUnderlying, allocatedUnderlying);\n    }\n\n    function _shareProfit(uint256 profit) internal returns (uint256, uint256) {\n        uint256 totalFeeAmount = profit.scaledMul(getPerformanceFee());\n        getStrategy().withdraw(totalFeeAmount);\n        uint256 strategistShare = _shareFees(totalFeeAmount);\n\n        return ((profit - totalFeeAmount), strategistShare);\n    }\n\n    function _shareFees(uint256 totalFeeAmount) internal returns (uint256) {\n        uint256 strategistShare = totalFeeAmount.scaledMul(getStrategistFee());\n\n        uint256 reserveShare = totalFeeAmount.scaledMul(getReserveFee());\n        uint256 treasuryShare = totalFeeAmount - strategistShare - reserveShare;\n\n        _depositToReserve(reserveShare);\n        if (treasuryShare > 0) {\n            _depositToTreasury(treasuryShare);\n        }\n        return strategistShare;\n    }\n\n    function _emergencyStop(uint256 underlyingReserves) internal {\n        // debt limit exceeded: withdraw funds from strategy\n        uint256 withdrawn = getStrategy().withdrawAll();\n\n        uint256 actualDebt = _computeNewAllocated(currentAllocated, withdrawn);\n\n        // check if debt can be covered with reserve funds\n        if (underlyingReserves >= actualDebt) {\n            reserve.withdraw(getUnderlying(), actualDebt);\n        } else if (underlyingReserves > 0) {\n            // debt can not be covered with reserves\n            reserve.withdraw(getUnderlying(), underlyingReserves);\n        }\n        // too much money lost, stop the strategy\n        _deactivateStrategy();\n    }\n\n    /**\n     * @notice Deactivates a strategy. All positions of the strategy are exited.\n     * @return `true` if strategy has been deactivated\n     */\n    function _deactivateStrategy() internal returns (bool) {\n        if (!strategyActive) return false;\n\n        strategyActive = false;\n        emit StrategyDeactivated(address(getStrategy()));\n        return true;\n    }\n\n    function _payStrategist(uint256 amount) internal {\n        _payStrategist(amount, strategist);\n    }\n\n    function _payStrategist(uint256 amount, address strategist) internal virtual;\n\n    function _transfer(address to, uint256 amount) internal virtual;\n\n    function _depositToReserve(uint256 amount) internal virtual;\n\n    function _depositToTreasury(uint256 amount) internal virtual;\n\n    function _availableUnderlying() internal view virtual returns (uint256);\n\n    function _reserveBalance() internal view virtual returns (uint256);\n\n    function _computeNewAllocated(uint256 allocated, uint256 withdrawn)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (allocated > withdrawn) {\n            return allocated - withdrawn;\n        }\n        return 0;\n    }\n\n    function _checkFeesInvariant(uint256 reserveFee, uint256 strategistFee) internal pure {\n        require(\n            reserveFee + strategistFee <= DECIMAL_SCALE,\n            \"sum of strategist fee and reserve fee should be below 1\"\n        );\n    }\n\n    function _rebalance(uint256 totalUnderlying, uint256 allocatedUnderlying)\n        private\n        returns (bool)\n    {\n        if (!strategyActive) return false;\n        // check if strategy should receive any funds\n        uint256 targetAllocation = getTargetAllocation();\n        if (targetAllocation == 0) return false;\n\n        IStrategy strategy = getStrategy();\n        uint256 bound = getBound();\n\n        uint256 target = totalUnderlying.scaledMul(targetAllocation);\n        uint256 upperBound = targetAllocation + bound;\n        upperBound = upperBound > DECIMAL_SCALE ? DECIMAL_SCALE : upperBound;\n        uint256 lowerBound = bound > targetAllocation ? 0 : targetAllocation - bound;\n        if (allocatedUnderlying > totalUnderlying.scaledMul(upperBound)) {\n            // withdraw funds from strategy\n            uint256 withdrawAmount = allocatedUnderlying - target;\n            strategy.withdraw(withdrawAmount);\n\n            currentAllocated = _computeNewAllocated(currentAllocated, withdrawAmount);\n        } else if (allocatedUnderlying < totalUnderlying.scaledMul(lowerBound)) {\n            // allocate more funds to strategy\n            uint256 depositAmount = target - allocatedUnderlying;\n            _transfer(address(strategy), depositAmount);\n            currentAllocated += depositAmount;\n            strategy.deposit();\n        }\n        return true;\n    }\n}\n"
    },
    "Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "ILiquidityPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.9;\n\nimport \"IERC20.sol\";\n\nimport \"IPreparable.sol\";\nimport \"IVault.sol\";\n\ninterface ILiquidityPool is IPreparable {\n    event Deposit(address indexed minter, uint256 mintAmount, uint256 mintTokens);\n\n    event DepositFor(\n        address indexed minter,\n        address indexed mintee,\n        uint256 mintAmount,\n        uint256 mintTokens\n    );\n\n    event Redeem(address indexed redeemer, uint256 redeemAmount, uint256 redeemTokens);\n\n    event LpTokenSet(address indexed lpToken);\n\n    event StakerVaultSet(address indexed stakerVault);\n\n    function redeem(uint256 redeemTokens) external returns (uint256);\n\n    function redeem(uint256 redeemTokens, uint256 minRedeemAmount) external returns (uint256);\n\n    function calcRedeem(address account, uint256 underlyingAmount) external returns (uint256);\n\n    function deposit(uint256 mintAmount) external payable returns (uint256);\n\n    function deposit(uint256 mintAmount, uint256 minTokenAmount) external payable returns (uint256);\n\n    function depositAndStake(uint256 depositAmount, uint256 minTokenAmount)\n        external\n        payable\n        returns (uint256);\n\n    function depositFor(address account, uint256 depositAmount) external payable returns (uint256);\n\n    function depositFor(\n        address account,\n        uint256 depositAmount,\n        uint256 minTokenAmount\n    ) external payable returns (uint256);\n\n    function unstakeAndRedeem(uint256 redeemLpTokens, uint256 minRedeemAmount)\n        external\n        returns (uint256);\n\n    function handleLpTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) external;\n\n    function executeNewVault() external returns (address);\n\n    function executeNewMaxWithdrawalFee() external returns (uint256);\n\n    function executeNewRequiredReserves() external returns (uint256);\n\n    function executeNewReserveDeviation() external returns (uint256);\n\n    function setLpToken(address _lpToken) external returns (bool);\n\n    function setStaker() external returns (bool);\n\n    function isCapped() external returns (bool);\n\n    function uncap() external returns (bool);\n\n    function updateDepositCap(uint256 _depositCap) external returns (bool);\n\n    function getUnderlying() external view returns (address);\n\n    function getLpToken() external view returns (address);\n\n    function getWithdrawalFee(address account, uint256 amount) external view returns (uint256);\n\n    function getVault() external view returns (IVault);\n\n    function exchangeRate() external view returns (uint256);\n}\n"
    },
    "IPreparable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.9;\n\ninterface IPreparable {\n    event ConfigPreparedAddress(bytes32 indexed key, address value, uint256 delay);\n    event ConfigPreparedNumber(bytes32 indexed key, uint256 value, uint256 delay);\n\n    event ConfigUpdatedAddress(bytes32 indexed key, address oldValue, address newValue);\n    event ConfigUpdatedNumber(bytes32 indexed key, uint256 oldValue, uint256 newValue);\n\n    event ConfigReset(bytes32 indexed key);\n}\n"
    },
    "IVault.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.9;\n\nimport \"IStrategy.sol\";\nimport \"IPreparable.sol\";\n\n/**\n * @title Interface for a Vault\n */\n\ninterface IVault is IPreparable {\n    function initialize(\n        address _pool,\n        uint256 _debtLimit,\n        uint256 _targetAllocation,\n        uint256 _bound\n    ) external;\n\n    function getStrategy() external view returns (IStrategy);\n\n    function withdrawFromStrategyWaitingForRemoval(address strategy) external returns (uint256);\n\n    function getStrategiesWaitingForRemoval() external view returns (address[] memory);\n\n    function getAllocatedToStrategyWaitingForRemoval(address strategy)\n        external\n        view\n        returns (uint256);\n\n    function withdraw(uint256 amount) external returns (bool);\n\n    function initializeStrategy(address strategy_) external returns (bool);\n\n    function withdrawAll() external;\n\n    function withdrawFromReserve(uint256 amount) external;\n\n    function getTotalUnderlying() external view returns (uint256);\n\n    function getUnderlying() external view returns (address);\n\n    function deposit() external payable;\n\n    event StrategyActivated(address indexed strategy);\n\n    event StrategyDeactivated(address indexed strategy);\n\n    event NewStrategist(address indexed strategist);\n\n    /**\n     * @dev 'netProfit' is the profit after all fees have been deducted\n     */\n    event Harvest(uint256 indexed netProfit, uint256 indexed loss);\n}\n"
    },
    "IStrategy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.9;\n\ninterface IStrategy {\n    function deposit() external payable returns (bool);\n\n    function balance() external view returns (uint256);\n\n    function withdraw(uint256 amount) external returns (bool);\n\n    function withdrawAll() external returns (uint256);\n\n    function harvestable() external view returns (uint256);\n\n    function harvest() external returns (uint256);\n\n    function strategist() external view returns (address);\n\n    function shutdown() external returns (bool);\n\n    function hasPendingFunds() external view returns (bool);\n}\n"
    },
    "IController.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.9;\n\nimport \"IAddressProvider.sol\";\nimport \"IPreparable.sol\";\nimport \"IGasBank.sol\";\nimport \"ILiquidityPool.sol\";\nimport \"IInflationManager.sol\";\n\n// solhint-disable ordering\n\ninterface IController is IPreparable {\n    function addressProvider() external view returns (IAddressProvider);\n\n    function inflationManager() external view returns (IInflationManager);\n\n    function addStakerVault(address stakerVault) external returns (bool);\n\n    function removePool(address pool) external returns (bool);\n\n    /** Keeper functions */\n    function prepareKeeperRequiredStakedBKD(uint256 amount) external;\n\n    function executeKeeperRequiredStakedBKD() external;\n\n    function getKeeperRequiredStakedBKD() external view returns (uint256);\n\n    function canKeeperExecuteAction(address keeper) external view returns (bool);\n\n    /** Miscellaneous functions */\n\n    function getTotalEthRequiredForGas(address payer) external view returns (uint256);\n}\n"
    },
    "IAddressProvider.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.9;\n\nimport \"ILiquidityPool.sol\";\nimport \"IPreparable.sol\";\nimport \"IGasBank.sol\";\nimport \"IOracleProvider.sol\";\n\n// solhint-disable ordering\n\ninterface IAddressProvider is IPreparable {\n    event KnownAddressKeyAdded(bytes32 indexed key);\n    event StakerVaultListed(address indexed stakerVault);\n    event StakerVaultDelisted(address indexed stakerVault);\n    event ActionListed(address indexed action);\n    event PoolListed(address indexed pool);\n    event PoolDelisted(address indexed pool);\n\n    /** Key functions */\n    function getKnownAddressKeys() external view returns (bytes32[] memory);\n\n    function addKnownAddressKey(bytes32 key) external;\n\n    /** Pool functions */\n\n    function allPools() external view returns (address[] memory);\n\n    function addPool(address pool) external;\n\n    function removePool(address pool) external returns (bool);\n\n    function getPoolForToken(address token) external view returns (ILiquidityPool);\n\n    function safeGetPoolForToken(address token) external view returns (ILiquidityPool);\n\n    /** Action functions */\n\n    function allActions() external view returns (address[] memory);\n\n    function addAction(address action) external returns (bool);\n\n    function isAction(address action) external view returns (bool);\n\n    /** Address functions */\n    function getAddress(bytes32 key) external view returns (address);\n\n    function prepareAddress(bytes32 key, address newAddress) external returns (bool);\n\n    function executeAddress(bytes32 key) external returns (address);\n\n    function resetAddress(bytes32 key) external returns (bool);\n\n    /** Staker vault functions */\n    function allStakerVaults() external view returns (address[] memory);\n\n    function tryGetStakerVault(address token) external view returns (bool, address);\n\n    function getStakerVault(address token) external view returns (address);\n\n    function addStakerVault(address stakerVault) external returns (bool);\n\n    function isStakerVault(address stakerVault, address token) external view returns (bool);\n\n    function isStakerVaultRegistered(address stakerVault) external view returns (bool);\n\n    function isWhiteListedFeeHandler(address feeHandler) external view returns (bool);\n\n    /** BKD Locker functions */\n\n    function getBKDLocker() external view returns (address);\n\n    function setBKDLocker(address bkdLocker) external;\n}\n"
    },
    "IGasBank.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.9;\n\ninterface IGasBank {\n    event Deposit(address indexed account, uint256 value);\n    event Withdraw(address indexed account, address indexed receiver, uint256 value);\n\n    function depositFor(address account) external payable;\n\n    function withdrawUnused(address account) external;\n\n    function withdrawFrom(address account, uint256 amount) external;\n\n    function withdrawFrom(\n        address account,\n        address payable to,\n        uint256 amount\n    ) external;\n\n    function balanceOf(address account) external view returns (uint256);\n}\n"
    },
    "IOracleProvider.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.9;\n\ninterface IOracleProvider {\n    /// @notice Quotes the USD price of `baseAsset`\n    /// @param baseAsset the asset of which the price is to be quoted\n    /// @return the USD price of the asset\n    function getPriceUSD(address baseAsset) external view returns (uint256);\n\n    /// @notice Quotes the ETH price of `baseAsset`\n    /// @param baseAsset the asset of which the price is to be quoted\n    /// @return the ETH price of the asset\n    function getPriceETH(address baseAsset) external view returns (uint256);\n}\n"
    },
    "IInflationManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.9;\n\ninterface IInflationManager {\n    event KeeperGaugeListed(address indexed pool, address indexed keeperGauge);\n    event AmmGaugeListed(address indexed token, address indexed ammGauge);\n    event KeeperGaugeDelisted(address indexed pool, address indexed keeperGauge);\n    event AmmGaugeDelisted(address indexed token, address indexed ammGauge);\n\n    /** Pool functions */\n\n    function setKeeperGauge(address pool, address _keeperGauge) external returns (bool);\n\n    function setAmmGauge(address token, address _ammGauge) external returns (bool);\n\n    function getAllAmmGauges() external view returns (address[] memory);\n\n    function getLpRateForStakerVault(address stakerVault) external view returns (uint256);\n\n    function getKeeperRateForPool(address pool) external view returns (uint256);\n\n    function getAmmRateForToken(address token) external view returns (uint256);\n\n    function getKeeperWeightForPool(address pool) external view returns (uint256);\n\n    function getAmmWeightForToken(address pool) external view returns (uint256);\n\n    function getLpPoolWeight(address pool) external view returns (uint256);\n\n    function getKeeperGaugeForPool(address pool) external view returns (address);\n\n    function getAmmGaugeForToken(address token) external view returns (address);\n\n    function setGovernanceProxy(address _governanceProxy) external returns (bool);\n\n    function isGovernanceProxy(address account) external view returns (bool);\n\n    function removeStakerVaultFromInflation(address stakerVault, address lpToken) external;\n\n    function addGaugeForVault(address lpToken) external returns (bool);\n\n    function whitelistGauge(address gauge) external;\n\n    function checkpointAllGauges() external returns (bool);\n\n    function mintRewards(address beneficiary, uint256 amount) external;\n\n    function addStrategyToDepositStakerVault(address depositStakerVault, address strategyPool)\n        external\n        returns (bool);\n\n    /** Weight setter functions **/\n\n    function prepareLpPoolWeight(address lpToken, uint256 newPoolWeight) external returns (bool);\n\n    function prepareAmmTokenWeight(address token, uint256 newTokenWeight) external returns (bool);\n\n    function prepareKeeperPoolWeight(address pool, uint256 newPoolWeight) external returns (bool);\n\n    function executeLpPoolWeight(address lpToken) external returns (uint256);\n\n    function executeAmmTokenWeight(address token) external returns (uint256);\n\n    function executeKeeperPoolWeight(address pool) external returns (uint256);\n\n    function batchPrepareLpPoolWeights(address[] calldata lpTokens, uint256[] calldata weights)\n        external\n        returns (bool);\n\n    function batchPrepareAmmTokenWeights(address[] calldata tokens, uint256[] calldata weights)\n        external\n        returns (bool);\n\n    function batchPrepareKeeperPoolWeights(address[] calldata pools, uint256[] calldata weights)\n        external\n        returns (bool);\n\n    function batchExecuteLpPoolWeights(address[] calldata lpTokens) external returns (bool);\n\n    function batchExecuteAmmTokenWeights(address[] calldata tokens) external returns (bool);\n\n    function batchExecuteKeeperPoolWeights(address[] calldata pools) external returns (bool);\n}\n"
    },
    "ScaledMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\n/*\n * @dev To use functions of this contract, at least one of the numbers must\n * be scaled to `DECIMAL_SCALE`. The result will scaled to `DECIMAL_SCALE`\n * if both numbers are scaled to `DECIMAL_SCALE`, otherwise to the scale\n * of the number not scaled by `DECIMAL_SCALE`\n */\nlibrary ScaledMath {\n    // solhint-disable-next-line private-vars-leading-underscore\n    uint256 internal constant DECIMAL_SCALE = 1e18;\n    // solhint-disable-next-line private-vars-leading-underscore\n    uint256 internal constant ONE = 1e18;\n\n    /**\n     * @notice Performs a multiplication between two scaled numbers\n     */\n    function scaledMul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return (a * b) / DECIMAL_SCALE;\n    }\n\n    /**\n     * @notice Performs a division between two scaled numbers\n     */\n    function scaledDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        return (a * DECIMAL_SCALE) / b;\n    }\n\n    /**\n     * @notice Performs a division between two numbers, rounding up the result\n     */\n    function scaledDivRoundUp(uint256 a, uint256 b) internal pure returns (uint256) {\n        return (a * DECIMAL_SCALE + b - 1) / b;\n    }\n\n    /**\n     * @notice Performs a division between two numbers, ignoring any scaling and rounding up the result\n     */\n    function divRoundUp(uint256 a, uint256 b) internal pure returns (uint256) {\n        return (a + b - 1) / b;\n    }\n}\n"
    },
    "EnumerableExtensions.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.9;\n\nimport \"EnumerableSet.sol\";\nimport \"EnumerableMapping.sol\";\n\nlibrary EnumerableExtensions {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n    using EnumerableMapping for EnumerableMapping.AddressToAddressMap;\n    using EnumerableMapping for EnumerableMapping.AddressToUintMap;\n\n    function toArray(EnumerableSet.AddressSet storage addresses)\n        internal\n        view\n        returns (address[] memory)\n    {\n        uint256 len = addresses.length();\n        address[] memory result = new address[](len);\n        for (uint256 i = 0; i < len; i++) {\n            result[i] = addresses.at(i);\n        }\n        return result;\n    }\n\n    function toArray(EnumerableSet.Bytes32Set storage values)\n        internal\n        view\n        returns (bytes32[] memory)\n    {\n        uint256 len = values.length();\n        bytes32[] memory result = new bytes32[](len);\n        for (uint256 i = 0; i < len; i++) {\n            result[i] = values.at(i);\n        }\n        return result;\n    }\n\n    function keyAt(EnumerableMapping.AddressToAddressMap storage map, uint256 index)\n        internal\n        view\n        returns (address)\n    {\n        (address key, ) = map.at(index);\n        return key;\n    }\n\n    function valueAt(EnumerableMapping.AddressToAddressMap storage map, uint256 index)\n        internal\n        view\n        returns (address)\n    {\n        (, address value) = map.at(index);\n        return value;\n    }\n\n    function keyAt(EnumerableMapping.AddressToUintMap storage map, uint256 index)\n        internal\n        view\n        returns (address)\n    {\n        (address key, ) = map.at(index);\n        return key;\n    }\n\n    function valueAt(EnumerableMapping.AddressToUintMap storage map, uint256 index)\n        internal\n        view\n        returns (uint256)\n    {\n        (, uint256 value) = map.at(index);\n        return value;\n    }\n\n    function keysArray(EnumerableMapping.AddressToAddressMap storage map)\n        internal\n        view\n        returns (address[] memory)\n    {\n        uint256 len = map.length();\n        address[] memory result = new address[](len);\n        for (uint256 i = 0; i < len; i++) {\n            result[i] = keyAt(map, i);\n        }\n        return result;\n    }\n\n    function valuesArray(EnumerableMapping.AddressToAddressMap storage map)\n        internal\n        view\n        returns (address[] memory)\n    {\n        uint256 len = map.length();\n        address[] memory result = new address[](len);\n        for (uint256 i = 0; i < len; i++) {\n            result[i] = valueAt(map, i);\n        }\n        return result;\n    }\n\n    function keysArray(EnumerableMapping.AddressToUintMap storage map)\n        internal\n        view\n        returns (address[] memory)\n    {\n        uint256 len = map.length();\n        address[] memory result = new address[](len);\n        for (uint256 i = 0; i < len; i++) {\n            result[i] = keyAt(map, i);\n        }\n        return result;\n    }\n}\n"
    },
    "EnumerableMapping.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.9;\n\nimport \"EnumerableSet.sol\";\n\nlibrary EnumerableMapping {\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n\n    // Code take from contracts/utils/structs/EnumerableMap.sol\n    // because the helper functions are private\n\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Map type with\n    // bytes32 keys and values.\n    // The Map implementation uses private functions, and user-facing\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\n    // the underlying Map.\n    // This means that we can only create new EnumerableMaps for types that fit\n    // in bytes32.\n\n    struct Map {\n        // Storage of keys\n        EnumerableSet.Bytes32Set _keys;\n        mapping(bytes32 => bytes32) _values;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function _set(\n        Map storage map,\n        bytes32 key,\n        bytes32 value\n    ) private returns (bool) {\n        map._values[key] = value;\n        return map._keys.add(key);\n    }\n\n    /**\n     * @dev Removes a key-value pair from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\n        delete map._values[key];\n        return map._keys.remove(key);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\n        return map._keys.contains(key);\n    }\n\n    /**\n     * @dev Returns the number of key-value pairs in the map. O(1).\n     */\n    function _length(Map storage map) private view returns (uint256) {\n        return map._keys.length();\n    }\n\n    /**\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n     *\n     * Note that there are no guarantees on the ordering of entries inside the\n     * array, and it may change when more entries are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\n        bytes32 key = map._keys.at(index);\n        return (key, map._values[key]);\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`.  O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\n        bytes32 value = map._values[key];\n        if (value == bytes32(0)) {\n            return (_contains(map, key), bytes32(0));\n        } else {\n            return (true, value);\n        }\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\n        bytes32 value = map._values[key];\n        require(value != 0 || _contains(map, key), \"EnumerableMap: nonexistent key\");\n        return value;\n    }\n\n    // AddressToAddressMap\n\n    struct AddressToAddressMap {\n        Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(\n        AddressToAddressMap storage map,\n        address key,\n        address value\n    ) internal returns (bool) {\n        return _set(map._inner, bytes32(uint256(uint160(key))), bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(AddressToAddressMap storage map, address key) internal returns (bool) {\n        return _remove(map._inner, bytes32(uint256(uint160(key))));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(AddressToAddressMap storage map, address key) internal view returns (bool) {\n        return _contains(map._inner, bytes32(uint256(uint160(key))));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(AddressToAddressMap storage map) internal view returns (uint256) {\n        return _length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the set. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressToAddressMap storage map, uint256 index)\n        internal\n        view\n        returns (address, address)\n    {\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\n        return (address(uint160(uint256(key))), address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`.  O(1).\n     * Does not revert if `key` is not in the map.\n     *\n     * _Available since v3.4._\n     */\n    function tryGet(AddressToAddressMap storage map, address key)\n        internal\n        view\n        returns (bool, address)\n    {\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(uint256(uint160(key))));\n        return (success, address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(AddressToAddressMap storage map, address key) internal view returns (address) {\n        return address(uint160(uint256(_get(map._inner, bytes32(uint256(uint160(key)))))));\n    }\n\n    // AddressToUintMap\n\n    struct AddressToUintMap {\n        Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(\n        AddressToUintMap storage map,\n        address key,\n        uint256 value\n    ) internal returns (bool) {\n        return _set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\n        return _remove(map._inner, bytes32(uint256(uint160(key))));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\n        return _contains(map._inner, bytes32(uint256(uint160(key))));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\n        return _length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the set. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressToUintMap storage map, uint256 index)\n        internal\n        view\n        returns (address, uint256)\n    {\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\n        return (address(uint160(uint256(key))), uint256(value));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`.  O(1).\n     * Does not revert if `key` is not in the map.\n     *\n     * _Available since v3.4._\n     */\n    function tryGet(AddressToUintMap storage map, address key)\n        internal\n        view\n        returns (bool, uint256)\n    {\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(uint256(uint160(key))));\n        return (success, uint256(value));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\n        return uint256(_get(map._inner, bytes32(uint256(uint160(key)))));\n    }\n}\n"
    },
    "AddressProviderHelpers.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.9;\n\nimport \"IGasBank.sol\";\nimport \"IVaultReserve.sol\";\nimport \"IOracleProvider.sol\";\nimport \"IAddressProvider.sol\";\n\nimport \"AddressProviderKeys.sol\";\n\nlibrary AddressProviderHelpers {\n    /**\n     * @return The address of the treasury.\n     */\n    function getTreasury(IAddressProvider provider) internal view returns (address) {\n        return provider.getAddress(AddressProviderKeys._TREASURY_KEY);\n    }\n\n    /**\n     * @return The gas bank.\n     */\n    function getGasBank(IAddressProvider provider) internal view returns (IGasBank) {\n        return IGasBank(provider.getAddress(AddressProviderKeys._GAS_BANK_KEY));\n    }\n\n    /**\n     * @return The address of the vault reserve.\n     */\n    function getVaultReserve(IAddressProvider provider) internal view returns (IVaultReserve) {\n        return IVaultReserve(provider.getAddress(AddressProviderKeys._VAULT_RESERVE_KEY));\n    }\n\n    /**\n     * @return The address of the swapperRegistry.\n     */\n    function getSwapperRegistry(IAddressProvider provider) internal view returns (address) {\n        return provider.getAddress(AddressProviderKeys._SWAPPER_REGISTRY_KEY);\n    }\n\n    /**\n     * @return The oracleProvider.\n     */\n    function getOracleProvider(IAddressProvider provider) internal view returns (IOracleProvider) {\n        return IOracleProvider(provider.getAddress(AddressProviderKeys._ORACLE_PROVIDER_KEY));\n    }\n}\n"
    },
    "AddressProviderKeys.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.9;\n\nlibrary AddressProviderKeys {\n    bytes32 internal constant _TREASURY_KEY = \"treasury\";\n    bytes32 internal constant _GAS_BANK_KEY = \"gasBank\";\n    bytes32 internal constant _VAULT_RESERVE_KEY = \"vaultReserve\";\n    bytes32 internal constant _SWAPPER_REGISTRY_KEY = \"swapperRegistry\";\n    bytes32 internal constant _ORACLE_PROVIDER_KEY = \"oracleProvider\";\n}\n"
    },
    "VaultStorage.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.9;\n\nimport \"EnumerableMapping.sol\";\nimport \"IVaultReserve.sol\";\nimport \"IStrategy.sol\";\n\ncontract VaultStorage {\n    uint256 public currentAllocated;\n    uint256 public waitingForRemovalAllocated;\n    address public pool;\n\n    /**\n     * @notice The address of the strategist for the vault\n     * @dev This should be updated as strategies are replaced\n     */\n    address public strategist;\n\n    uint256 public totalDebt;\n    bool public strategyActive;\n\n    EnumerableMapping.AddressToUintMap internal _strategiesWaitingForRemoval;\n}\n\ncontract VaultStorageV1 is VaultStorage {\n    /**\n     * @dev This is to avoid breaking contracts inheriting from `VaultStorage`\n     * such as `Erc20Vault`, especially if they have storage variables\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     * for more details\n     *\n     * A new field can be added using a new contract such as\n     *\n     * ```solidity\n     * contract VaultStorageV2 is VaultStorage {\n     *   uint256 someNewField;\n     *   uint256[49] private __gap;\n     * }\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "Preparable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.9;\n\nimport \"IPreparable.sol\";\nimport \"Errors.sol\";\n\n/**\n * @notice Implements the base logic for a two-phase commit\n * @dev This does not implements any access-control so publicly exposed\n * callers should make sure to have the proper checks in palce\n */\ncontract Preparable is IPreparable {\n    uint256 private constant _MIN_DELAY = 3 days;\n\n    mapping(bytes32 => address) public pendingAddresses;\n    mapping(bytes32 => uint256) public pendingUInts256;\n\n    mapping(bytes32 => address) public currentAddresses;\n    mapping(bytes32 => uint256) public currentUInts256;\n\n    /**\n     * @dev Deadlines shares the same namespace regardless of the type\n     * of the pending variable so this needs to be enforced in the caller\n     */\n    mapping(bytes32 => uint256) public deadlines;\n\n    function _prepareDeadline(bytes32 key, uint256 delay) internal {\n        require(deadlines[key] == 0, Error.DEADLINE_NOT_ZERO);\n        require(delay >= _MIN_DELAY, Error.DELAY_TOO_SHORT);\n        deadlines[key] = block.timestamp + delay;\n    }\n\n    /**\n     * @notice Prepares an uint256 that should be commited to the contract\n     * after `_MIN_DELAY` elapsed\n     * @param value The value to prepare\n     * @return `true` if success.\n     */\n    function _prepare(\n        bytes32 key,\n        uint256 value,\n        uint256 delay\n    ) internal returns (bool) {\n        _prepareDeadline(key, delay);\n        pendingUInts256[key] = value;\n        emit ConfigPreparedNumber(key, value, delay);\n        return true;\n    }\n\n    /**\n     * @notice Same as `_prepare(bytes32,uint256,uint256)` but uses a default delay\n     */\n    function _prepare(bytes32 key, uint256 value) internal returns (bool) {\n        return _prepare(key, value, _MIN_DELAY);\n    }\n\n    /**\n     * @notice Prepares an address that should be commited to the contract\n     * after `_MIN_DELAY` elapsed\n     * @param value The value to prepare\n     * @return `true` if success.\n     */\n    function _prepare(\n        bytes32 key,\n        address value,\n        uint256 delay\n    ) internal returns (bool) {\n        _prepareDeadline(key, delay);\n        pendingAddresses[key] = value;\n        emit ConfigPreparedAddress(key, value, delay);\n        return true;\n    }\n\n    /**\n     * @notice Same as `_prepare(bytes32,address,uint256)` but uses a default delay\n     */\n    function _prepare(bytes32 key, address value) internal returns (bool) {\n        return _prepare(key, value, _MIN_DELAY);\n    }\n\n    /**\n     * @notice Reset a uint256 key\n     * @return `true` if success.\n     */\n    function _resetUInt256Config(bytes32 key) internal returns (bool) {\n        require(deadlines[key] != 0, Error.DEADLINE_NOT_ZERO);\n        deadlines[key] = 0;\n        pendingUInts256[key] = 0;\n        emit ConfigReset(key);\n        return true;\n    }\n\n    /**\n     * @notice Reset an address key\n     * @return `true` if success.\n     */\n    function _resetAddressConfig(bytes32 key) internal returns (bool) {\n        require(deadlines[key] != 0, Error.DEADLINE_NOT_ZERO);\n        deadlines[key] = 0;\n        pendingAddresses[key] = address(0);\n        emit ConfigReset(key);\n        return true;\n    }\n\n    /**\n     * @dev Checks the deadline of the key and reset it\n     */\n    function _executeDeadline(bytes32 key) internal {\n        uint256 deadline = deadlines[key];\n        require(block.timestamp >= deadline, Error.DEADLINE_NOT_REACHED);\n        require(deadline != 0, Error.DEADLINE_NOT_SET);\n        deadlines[key] = 0;\n    }\n\n    /**\n     * @notice Execute uint256 config update (with time delay enforced).\n     * @dev Needs to be called after the update was prepared. Fails if called before time delay is met.\n     * @return New value.\n     */\n    function _executeUInt256(bytes32 key) internal returns (uint256) {\n        _executeDeadline(key);\n        uint256 newValue = pendingUInts256[key];\n        _setConfig(key, newValue);\n        return newValue;\n    }\n\n    /**\n     * @notice Execute address config update (with time delay enforced).\n     * @dev Needs to be called after the update was prepared. Fails if called before time delay is met.\n     * @return New value.\n     */\n    function _executeAddress(bytes32 key) internal returns (address) {\n        _executeDeadline(key);\n        address newValue = pendingAddresses[key];\n        _setConfig(key, newValue);\n        return newValue;\n    }\n\n    function _setConfig(bytes32 key, address value) internal returns (address) {\n        address oldValue = currentAddresses[key];\n        currentAddresses[key] = value;\n        pendingAddresses[key] = address(0);\n        deadlines[key] = 0;\n        emit ConfigUpdatedAddress(key, oldValue, value);\n        return value;\n    }\n\n    function _setConfig(bytes32 key, uint256 value) internal returns (uint256) {\n        uint256 oldValue = currentUInts256[key];\n        currentUInts256[key] = value;\n        pendingUInts256[key] = 0;\n        deadlines[key] = 0;\n        emit ConfigUpdatedNumber(key, oldValue, value);\n        return value;\n    }\n}\n"
    },
    "IPausable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.9;\n\ninterface IPausable {\n    function pause() external returns (bool);\n\n    function unpause() external returns (bool);\n\n    function isPaused() external view returns (bool);\n\n    function isAuthorizedToPause(address account) external view returns (bool);\n}\n"
    },
    "AdminUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.9;\n\nimport \"AdminBase.sol\";\n\ncontract AdminUpgradeable is AdminBase {\n    /**\n     * @dev This is to avoid breaking contracts inheriting from `AdminUpgradeable\n     * in case we need to add more variables to the admin contract, although unlikely\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     * for more details\n     */\n    uint256[50] private __gap;\n\n    function _initializeAdmin(address _admin) internal {\n        _addAdmin(_admin);\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "london",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "libraries": {
      "VaultReserve.sol": {}
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}