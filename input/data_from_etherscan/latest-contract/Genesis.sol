{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"GenesisMainnet.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-or-later\r\n\r\npragma solidity 0.8.4;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./SafeERC20.sol\";\r\nimport \"./SafeMath.sol\";\r\n\r\ninterface ISwapHelper {\r\n    function isTokenSwapSupport(address fromToken, address toToken) external view returns (bool);\r\n    function getAmountsOut(address fromToken, address toToken, uint fromAmount) external view returns (uint[] memory);\r\n    function swapExactTokensForTokens(address fromToken, address toToken, uint fromAmount, uint amountOutMin) external;\r\n}\r\n\r\ninterface IPreGenesis {\r\n    function getAssetBalance(address account) external view returns(uint256);\r\n    function transferVCoin(address _user, uint256 _vCoinAmount) external;\r\n}\r\n\r\ninterface IPriceHelper {\r\n    function getBTCUSDC365() external view returns(uint256);\r\n    function getBTCUSDC24() external view returns(uint256);\r\n    function getBTCUSDC() external view returns(uint256);\r\n    function getBTCHBTC24() external view returns(uint256);\r\n    function getBTCHBTC() external view returns(uint256);\r\n    function update() external;\r\n}\r\n\r\ncontract Genesis {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n    \r\n    event VTokenDeposit(address indexed user, address toToken, uint256 targetAmount);\r\n    event TokenDeposit(address indexed user, address fromToken, address toToken, uint256 targetAmount);\r\n    \r\n    struct TokenInfo {\r\n        bool isActive;\r\n        bool fromNative;\r\n        address token;\r\n    }\r\n    \r\n    struct GenesisInfo {\r\n        bool isActive;\r\n        uint genesisAmount;\r\n        uint bondRate;\r\n    }\r\n    \r\n    modifier genesisOwner() {\r\n        require(msg.sender == admin, \"NoOwner\");\r\n        _;\r\n    }\r\n    \r\n    modifier genesisReward() {\r\n        require(msg.sender == genesisRewardHandler, \"NoRewardHandler\");\r\n        _;\r\n    }\r\n    \r\n    modifier tokenSupported(address token) {\r\n        require(tokenMap[token].isActive, \"NotSupported\");\r\n        _;\r\n    }\r\n    \r\n    modifier genesisOngoing() {\r\n        require(block.timestamp \u003e= startTimestamp \u0026\u0026 block.timestamp \u003c= endTimestamp, \"GenesisNotOngoing\");\r\n        _;\r\n    }\r\n    \r\n    modifier genesisEnd() {\r\n        require(block.timestamp \u003e endTimestamp, \"GenesisNotEnd\");\r\n        _;\r\n    }\r\n    \r\n    modifier genesisUnsettled() {\r\n        require(genesisSettleState == 0, \"GenesisNotUnsettled\");\r\n        _;\r\n    }\r\n    \r\n    modifier genesisSettled1() {\r\n        require(genesisSettleState == 1, \"GenesisNotSettled1\");\r\n        _;\r\n    }\r\n    \r\n    modifier genesisSettled12() {\r\n        require(genesisSettleState \u003e= 1, \"GenesisNotSettled12\");\r\n        _;\r\n    }\r\n    \r\n    modifier genesisSettled2() {\r\n        require(genesisSettleState == 2, \"GenesisNotSettled2\");\r\n        _;\r\n    }\r\n    \r\n    uint public constant RATE_MAX = 50;\r\n    uint public constant RATE_LEVEL = 100;\r\n    uint public constant BOND_DISCOUNT_MIN = 0;\r\n    uint public constant BOND_DISCOUNT_MAX = 1000;\r\n    uint public constant BOND_DISCOUNT_LEVEL = 10000;\r\n    \r\n    address public admin;\r\n    address public nativeToken;\r\n    address public targetToken;\r\n    \r\n    address public swapHelper;\r\n    address public priceHelper;\r\n    address public genesisRewardHandler;\r\n    \r\n    address[] public preGenesisArray;\r\n    mapping(address =\u003e uint) public preGenesises;\r\n    \r\n    mapping(address =\u003e TokenInfo) public tokenMap;\r\n    \r\n    mapping(address =\u003e GenesisInfo) public userGenesisMap;\r\n    \r\n    uint public startTimestamp = 1646827200; //2022-03-09GMT12:00:00\r\n    uint public endTimestamp = 1648036800; //2022-03-23GMT12:00:00\r\n    \r\n    uint public genesisSettleState = 0;\r\n    uint public totalGenesisAmount;\r\n    uint public totalBondAmount;\r\n    uint public genesisPrice;\r\n    uint public bondPrice;\r\n    \r\n    receive() external payable {\r\n    }\r\n    \r\n    constructor(address pAdmin, address pNativeToken, address pTargetToken) {\r\n        admin = pAdmin;\r\n        nativeToken = pNativeToken;\r\n        targetToken = pTargetToken;\r\n        \r\n        //USDC\r\n        tokenMap[0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48] = TokenInfo({\r\n            isActive: true,\r\n            fromNative: false,\r\n            token: 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\r\n        });\r\n        \r\n        //USDT\r\n        tokenMap[0xdAC17F958D2ee523a2206206994597C13D831ec7] = TokenInfo({\r\n            isActive: true,\r\n            fromNative: false,\r\n            token: 0xdAC17F958D2ee523a2206206994597C13D831ec7\r\n        });\r\n        \r\n        //WBTC\r\n        tokenMap[0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599] = TokenInfo({\r\n            isActive: true,\r\n            fromNative: false,\r\n            token: 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599\r\n        });\r\n        \r\n        //WETH\r\n        tokenMap[0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2] = TokenInfo({\r\n            isActive: true,\r\n            fromNative: true,\r\n            token: 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\r\n        });\r\n        \r\n        preGenesisArray.push(0xfCA3a1a001bb11A8E2b9b7eF81E62408aCEC8D19);\r\n        preGenesises[0xfCA3a1a001bb11A8E2b9b7eF81E62408aCEC8D19] = 1;\r\n    }\r\n    \r\n    function changeOwner(address pOwner) \r\n        public \r\n        genesisOwner \r\n    {\r\n        admin = pOwner;\r\n    }\r\n    \r\n    function setParametersAddr(uint paramType, address paramAddr) \r\n        public \r\n        genesisOwner \r\n    {\r\n        require(paramType \u003e= 1 \u0026\u0026 paramType \u003c= 3, \"OutOfRange\");\r\n        \r\n        if(paramType == 1) \r\n        {\r\n            swapHelper = paramAddr;\r\n        }\r\n        else if(paramType == 2) \r\n        {\r\n            priceHelper = paramAddr;\r\n        }\r\n        else if(paramType == 3) \r\n        {\r\n            genesisRewardHandler = paramAddr;\r\n        }\r\n    }\r\n    \r\n    function setParameters(uint paramType, uint paramValue) \r\n        public \r\n        genesisOwner \r\n    {\r\n        require(paramType \u003e= 1 \u0026\u0026 paramType \u003c= 2, \"OutOfRange\");\r\n        \r\n        if(paramType == 1) \r\n        {\r\n            startTimestamp = paramValue;\r\n        }\r\n        else if(paramType == 2) \r\n        {\r\n            endTimestamp = paramValue;\r\n        }\r\n    }\r\n    \r\n    function setPreGenesis(address pPreGenesis, uint enabled) \r\n        public \r\n        genesisOwner \r\n    {\r\n        if(enabled == 1) {\r\n            preGenesisArray.push(pPreGenesis);\r\n        }\r\n        \r\n        preGenesises[pPreGenesis] = enabled;\r\n    }\r\n     \r\n    function enableTokenInfo(address token, bool fromNative)\r\n        public\r\n        genesisOwner\r\n    {\r\n        tokenMap[token] = TokenInfo({\r\n            isActive: true,\r\n            fromNative: fromNative,\r\n            token: token\r\n        });\r\n    }\r\n    \r\n    function disableTokenInfo(address token)\r\n        public\r\n        genesisOwner\r\n    {\r\n        TokenInfo storage tokenInfo = tokenMap[token];\r\n        require(tokenInfo.isActive, \"TokenAlreadyDisabled\");\r\n        \r\n        tokenMap[token].isActive = false;\r\n    }\r\n    \r\n    function adjustGenesisAmounts(address user, uint targetAmount)\r\n        internal\r\n    {\r\n        if(userGenesisMap[user].isActive) {\r\n            GenesisInfo storage genesisInfo = userGenesisMap[user];\r\n            \r\n            uint bondAmount = genesisInfo.genesisAmount * genesisInfo.bondRate / RATE_LEVEL;\r\n            totalBondAmount -= bondAmount;\r\n            \r\n            genesisInfo.genesisAmount += targetAmount;\r\n            totalGenesisAmount += targetAmount;\r\n            \r\n            bondAmount = genesisInfo.genesisAmount * genesisInfo.bondRate / RATE_LEVEL;\r\n            totalBondAmount += bondAmount;\r\n        }\r\n        else {\r\n            userGenesisMap[user] = GenesisInfo({\r\n                isActive: true,\r\n                genesisAmount: targetAmount,\r\n                bondRate: 0\r\n            });\r\n            \r\n            totalGenesisAmount += targetAmount;\r\n        }\r\n    }\r\n    \r\n    function convertPreGenesis(address preGenesis)\r\n        public\r\n        genesisOngoing\r\n    {\r\n        require(preGenesises[preGenesis] == 1, \"NotPreGenesis\");\r\n        \r\n        uint targetAmount = IPreGenesis(preGenesis).getAssetBalance(msg.sender);\r\n        require(targetAmount \u003e 0, \"NoAmount\");\r\n        \r\n        IPreGenesis(preGenesis).transferVCoin(msg.sender, targetAmount);\r\n        emit VTokenDeposit(msg.sender, targetToken, targetAmount);\r\n        adjustGenesisAmounts(msg.sender, targetAmount);\r\n    }\r\n    \r\n    function depositToken(address fromToken, uint fromAmount, uint targetAmountMin)\r\n        public\r\n        genesisOngoing\r\n        tokenSupported(fromToken)\r\n    {\r\n        uint targetAmount;\r\n        require(fromAmount \u003e 0, \"NoAmount\");\r\n        \r\n        if(fromToken == targetToken) {\r\n            IERC20(fromToken).safeTransferFrom(msg.sender, address(this), fromAmount);\r\n            targetAmount = fromAmount;\r\n        }\r\n        else {\r\n            IERC20(fromToken).safeTransferFrom(msg.sender, swapHelper, fromAmount);\r\n            uint oldTokenBalance = IERC20(targetToken).balanceOf(address(this));\r\n            ISwapHelper(swapHelper).swapExactTokensForTokens(fromToken, targetToken, fromAmount, targetAmountMin);\r\n            uint newTokenBalance = IERC20(targetToken).balanceOf(address(this));\r\n            targetAmount = newTokenBalance - oldTokenBalance;\r\n        }\r\n        \r\n        emit TokenDeposit(msg.sender, fromToken, targetToken, targetAmount);\r\n        adjustGenesisAmounts(msg.sender, targetAmount);\r\n    }\r\n    \r\n    function depositNative(uint targetAmountMin)\r\n        public\r\n        payable\r\n        genesisOngoing\r\n        tokenSupported(nativeToken)\r\n    {\r\n        uint fromAmount = msg.value;\r\n        require(fromAmount \u003e 0, \"NoAmount\");\r\n        \r\n        payable(swapHelper).transfer(fromAmount);\r\n        uint oldTokenBalance = IERC20(targetToken).balanceOf(address(this));\r\n        ISwapHelper(swapHelper).swapExactTokensForTokens(nativeToken, targetToken, fromAmount, targetAmountMin);\r\n        uint newTokenBalance = IERC20(targetToken).balanceOf(address(this));\r\n        uint targetAmount = newTokenBalance - oldTokenBalance;\r\n        \r\n        emit TokenDeposit(msg.sender, nativeToken, targetToken, targetAmount);\r\n        adjustGenesisAmounts(msg.sender, targetAmount);\r\n    }\r\n    \r\n    function setPreBondRate(uint bondRate)\r\n        public\r\n        genesisOngoing\r\n    {\r\n        require(userGenesisMap[msg.sender].isActive, \"NoUser\");\r\n        require(bondRate \u003c= RATE_MAX, \"MaxExceeded\");\r\n        \r\n        GenesisInfo storage genesisInfo = userGenesisMap[msg.sender];\r\n        require(bondRate \u003e= genesisInfo.bondRate, \"NoDecrease\");\r\n        \r\n        uint bondAmount = genesisInfo.genesisAmount * genesisInfo.bondRate / RATE_LEVEL;\r\n        totalBondAmount -= bondAmount;\r\n        \r\n        genesisInfo.bondRate = bondRate;\r\n        bondAmount = genesisInfo.genesisAmount * genesisInfo.bondRate / RATE_LEVEL;\r\n        totalBondAmount += bondAmount;\r\n    }\r\n    \r\n    function handlePreGenesisBatch(address preGenesis, address[] calldata users)\r\n        public\r\n        genesisOwner\r\n        genesisEnd\r\n        genesisUnsettled\r\n    {\r\n        require(preGenesises[preGenesis] == 1, \"NotPreGenesis\");\r\n        \r\n        for(uint k=0; k\u003cusers.length; k++) {\r\n            uint targetAmount = IPreGenesis(preGenesis).getAssetBalance(users[k]);\r\n            require(targetAmount \u003e 0, \"NoAmount\");\r\n            \r\n            IPreGenesis(preGenesis).transferVCoin(users[k], targetAmount);\r\n            emit VTokenDeposit(users[k], targetToken, targetAmount);\r\n            adjustGenesisAmounts(users[k], targetAmount);\r\n        }\r\n    }\r\n    \r\n    function settleGenesis()\r\n        public\r\n        genesisOwner\r\n        genesisEnd\r\n        genesisUnsettled\r\n    {\r\n        uint btcusdc365 = IPriceHelper(priceHelper).getBTCUSDC365();\r\n        require(btcusdc365 \u003e 0, \"NoPrice\");\r\n        \r\n        //DISCOUNT: 10000 LEVEL\r\n        //BOND_DISCOUNT_MIN = 0: when rate is RATE_MAX\r\n        //BOND_DISCOUNT_MAX = 1000: when rate is 0.\r\n        uint bondDiscount = (RATE_MAX-totalBondAmount*RATE_LEVEL/totalGenesisAmount)*BOND_DISCOUNT_MAX/RATE_MAX + \r\n                            totalBondAmount*RATE_LEVEL/totalGenesisAmount*BOND_DISCOUNT_MIN/RATE_MAX;\r\n        genesisPrice = btcusdc365/10000;\r\n        bondPrice = genesisPrice*(BOND_DISCOUNT_LEVEL-bondDiscount)/BOND_DISCOUNT_LEVEL;\r\n        \r\n        genesisSettleState = 1;\r\n    }\r\n    \r\n    function getGenesisInfo()\r\n        public\r\n        view\r\n        genesisSettled12\r\n        returns(uint256 genesisAmount, uint256 bondAmount, uint256 priceGenesis, uint256 priceBond)\r\n    {\r\n        genesisAmount = totalGenesisAmount;\r\n        bondAmount = totalBondAmount;\r\n        priceGenesis = genesisPrice;\r\n        priceBond = bondPrice;\r\n    }\r\n    \r\n    function getUserGenesisInfo(address user)\r\n        public\r\n        view\r\n        returns(uint256 genesisAmount, uint256 bondRate, uint256 bondRateLevel)\r\n    {\r\n        if(userGenesisMap[user].isActive) {\r\n            genesisAmount = userGenesisMap[user].genesisAmount;\r\n            bondRate = userGenesisMap[user].bondRate;\r\n            bondRateLevel = RATE_LEVEL;\r\n        }\r\n    }\r\n    \r\n    function withdrawGenesis()\r\n        public\r\n        genesisSettled1\r\n        genesisReward\r\n    {\r\n        uint amount = IERC20(targetToken).balanceOf(address(this));\r\n        IERC20(targetToken).safeTransfer(msg.sender, amount);\r\n        \r\n        genesisSettleState = 2;\r\n    }\r\n    \r\n    function withdrawTokenProtocol(address token, address payable receiver)\r\n        public\r\n        genesisSettled2\r\n        genesisOwner\r\n    {\r\n        uint amount = IERC20(token).balanceOf(address(this));\r\n        IERC20(token).safeTransfer(receiver, amount);\r\n    }\r\n    \r\n    function withdrawNativeProtocol(address payable receiver)\r\n        public\r\n        genesisSettled2\r\n        genesisOwner\r\n    {\r\n        uint amount = address(this).balance;\r\n        receiver.transfer(amount);\r\n    }\r\n\r\n}\r\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the decimals of token.\n     *\n     * Should check whether it is correct for involved token.\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport \"./IERC20.sol\";\nimport \"./Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // \u0027safeIncreaseAllowance\u0027 and \u0027safeDecreaseAllowance\u0027\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance \u003e= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity\u0027s return data size checking mechanism, since\n        // we\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length \u003e 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler\u0027s built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c \u003c a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b \u003e a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n            // benefit is lost if \u0027b\u0027 is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b \u003c= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b \u003e 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b \u003e 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"}}