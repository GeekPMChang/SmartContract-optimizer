{{
  "language": "Solidity",
  "sources": {
    "./contracts/strategies/StableConvexXPool.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.8.4;\n\nimport \"../BaseStrategy.sol\";\nimport \"../interfaces/IERC20Detailed.sol\";\nimport \"../interfaces/ICurve.sol\";\nimport \"../interfaces/UniSwap/IUni.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\n/// Convex booster interface\ninterface Booster {\n    struct PoolInfo {\n        address lptoken;\n        address token;\n        address gauge;\n        address crvRewards;\n        address stash;\n        bool shutdown;\n    }\n\n    function poolInfo(uint256)\n        external\n        view\n        returns (\n            address,\n            address,\n            address,\n            address,\n            address,\n            bool\n        );\n\n    // deposit lp tokens and stake\n    function deposit(\n        uint256 _pid,\n        uint256 _amount,\n        bool _stake\n    ) external returns (bool);\n}\n\n/// Convex rewards interface\ninterface Rewards {\n    function balanceOf(address account) external view returns (uint256);\n\n    function earned(address account) external view returns (uint256);\n\n    function withdrawAndUnwrap(uint256 amount, bool claim) external returns (bool);\n\n    function withdrawAllAndUnwrap(bool claim) external;\n\n    function getReward() external returns (bool);\n}\n\n/** @title StableConvexXPool\n*   @notice Convex strategy based of yearns convex contract that allows usage of one of the 3 pool\n*       stables as want, rather than a metapool lp token. This strategy can swap between meta pool\n*       and convex strategies to opimize yield/risk, and routes all assets through the following flow:\n*           3crv => metaLp => convex.\n*/\ncontract StableConvexXPool is BaseStrategy {\n    using SafeERC20 for IERC20;\n    /*///////////////////////////////////////////////////////////////\n                            CONTRACT VARIABLES\n    //////////////////////////////////////////////////////////////*/\n\n    // Contract addresses\n    address public constant BOOSTER = address(0xF403C135812408BFbE8713b5A23a04b3D48AAE31);\n\n    address public constant CVX = address(0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B);\n    address public constant CRV = address(0xD533a949740bb3306d119CC777fa900bA034cd52);\n    address public constant WETH = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n    address public constant DAI = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n    address public constant USDC = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\n    address public constant USDT = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\n\n    address public constant CRV_3POOL = address(0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7);\n    IERC20 public constant CRV_3POOL_TOKEN = IERC20(address(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490));\n\n    // Dexes for selling reward tokens\n    address public constant UNISWAP = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n    address public constant SUSHISWAP = address(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);\n\n    // meta pool token layout: [minor stable, 3Crv]\n    int128 public constant CRV3_INDEX = 1;\n    uint256 public constant CRV_METAPOOL_LEN = 2;\n    // 3pool token layout: [dai, usdc, usdt]\n    uint256 public constant CRV_3POOL_LEN = 3;\n\n    uint256 public constant TO_ETH = 0;\n    uint256 public constant TO_WANT = 1;\n\n    // Want tokens index in 3 pool\n    int128 public immutable WANT_INDEX;\n\n    address public curve; // meta pool\n    IERC20 public lpToken; // meta pool lp token\n    uint256 public pId; // convex lp token pid\n    address public rewardContract; // convex reward contract for lp token\n\n    uint256 public newPId;\n    address public newCurve;\n    IERC20 public newLPToken;\n    address public newRewardContract;\n\n    address[] public dex;\n    uint256 constant totalCliffs = 100;\n    uint256 constant maxSupply = 1e8 * 1e18;\n    uint256 constant reductionPerCliff = 1e5 * 1e18;\n\n    // when withdrawing we try to withdraw an additional x BP to cover withdrawal fees etc\n    uint256 public slippageRecover = 3; \n    uint256 public slippage = 10; // how much slippage to we accept\n\n    /*///////////////////////////////////////////////////////////////\n                            EVENTS\n    //////////////////////////////////////////////////////////////*/\n    event LogSetNewPool(uint256 indexed newPId, address newLPToken, address newRewardContract, address newCurve);\n    event LogSwitchDex(uint256 indexed id, address newDex);\n    event LogSetNewDex(uint256 indexed id, address newDex);\n    event LogChangePool(uint256 indexed newPId, address newLPToken, address newRewardContract, address newCurve);\n    event LogSetNewSlippageRecover(uint256 slippage);\n    event LogSetNewSlippage(uint256 slippage);\n\n    constructor(address _vault, int128 wantIndex) BaseStrategy(_vault) {\n        profitFactor = 1000;\n        uint8 decimals = IERC20Detailed(address(want)).decimals();\n        debtThreshold = 1_00_000 * (uint256(10)**decimals);\n        dex = new address[](2);\n        _switchDex(0, UNISWAP);\n        _switchDex(1, SUSHISWAP);\n\n        require(\n            (address(want) == DAI && wantIndex == 0) ||\n                (address(want) == USDC && wantIndex == 1) ||\n                (address(want) == USDT && wantIndex == 2),\n            \"want and wantIndex does not match\"\n        );\n        WANT_INDEX = wantIndex;\n\n        want.safeApprove(CRV_3POOL, type(uint256).max);\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                            SETTERS\n    //////////////////////////////////////////////////////////////*/\n\n    /** @notice Set a new curve meta pool and convex target for the strategy\n    *   @dev The migration will take place during the next harvest cycle (see prepareReturn)\n    */\n    function setNewPool(uint256 _newPId, address _newCurve) external onlyAuthorized {\n        require(_newPId != pId, \"setMetaPool: same id\");\n        (address lp, , , address reward, , bool shutdown) = Booster(BOOSTER).poolInfo(_newPId);\n        require(!shutdown, \"setMetaPool: pool is shutdown\");\n        IERC20 _newLPToken = IERC20(lp);\n        newLPToken = _newLPToken;\n        newRewardContract = reward;\n        newPId = _newPId;\n        newCurve = _newCurve;\n        if (CRV_3POOL_TOKEN.allowance(address(this), newCurve) == 0) {\n            CRV_3POOL_TOKEN.safeApprove(newCurve, type(uint256).max);\n        }\n        if (_newLPToken.allowance(address(this), BOOSTER) == 0) {\n            _newLPToken.safeApprove(BOOSTER, type(uint256).max);\n        }\n\n        emit LogSetNewPool(_newPId, lp, reward, _newCurve);\n    }\n\n    /** @notice Set how much to lp tokens to withdraw in excess \n    *   @dev curve estimates for calc token amounts are slightly off, correct them by x BP\n    */\n    function setSlippageRecover(uint256 _slippage) external onlyAuthorized {\n        slippageRecover = _slippage;\n        emit LogSetNewSlippageRecover(_slippage);\n    }\n\n    /** @notice Amount of slippage we accept\n    *   @dev Since slippage isnt usefull when calculated on chain against an amm, we use\n    *       a straight forward heuristic - assume stable coin price of 1 usd and apply\n    *       slippage against virtual price of lp token\n    */\n    function setSlippage(uint256 _slippage) external onlyAuthorized {\n        slippage = _slippage;\n        emit LogSetNewSlippage(_slippage);\n    }\n\n    /** @notice Swap which dex is traded against\n    */\n    function switchDex(uint256 id, address newDex) external onlyAuthorized {\n        _switchDex(id, newDex);\n        emit LogSetNewDex(id, newDex);\n    }\n\n    /** @notice Internal switch dex logic\n    */\n    function _switchDex(uint256 id, address newDex) private {\n        dex[id] = newDex;\n\n        IERC20 token;\n        if (id == 0) {\n            token = IERC20(CRV);\n        } else {\n            token = IERC20(CVX);\n        }\n\n        if (token.allowance(address(this), newDex) == 0) {\n            token.approve(newDex, type(uint256).max);\n        }\n        emit LogSwitchDex(id, newDex);\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                            GETTERS\n    //////////////////////////////////////////////////////////////*/\n\n    function name() external pure override returns (string memory) {\n        return \"StrategyConvexXPool\";\n    }\n\n    function estimatedTotalAssets() public view override returns (uint256 estimated) {\n        estimated = _estimatedTotalAssets(true);\n    }\n\n    /** @notice Get total estimated assets in strategy\n    *   @dev If no curve/convex target is set return balance of strategy\n    *   @param includeReward Include convex rewards in total assets\n    */\n    function _estimatedTotalAssets(bool includeReward) private view returns (uint256 estimated) {\n        if (rewardContract != address(0)) {\n            uint256 lpAmount = Rewards(rewardContract).balanceOf(address(this));\n            if (lpAmount > 0) {\n                uint256 crv3Amount = ICurveMetaPool(curve).calc_withdraw_one_coin(lpAmount, CRV3_INDEX);\n                estimated = ICurve3Pool(CRV_3POOL).calc_withdraw_one_coin(crv3Amount, WANT_INDEX);\n            }\n            if (includeReward) {\n                estimated += _claimableBasic(TO_WANT);\n            }\n        }\n        estimated += want.balanceOf(address(this));\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                        EMERGENCY                \n    //////////////////////////////////////////////////////////////*/\n\n\n    /** @notice Forcefully withdraw and sell rewards from convex and curve pools\n    *   @dev Should only be used post emergency state being triggered to ensure all assets are withdrawn\n    */\n    function forceWithdraw() external onlyAuthorized {\n        _withdrawAll();\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                        CURVE/CONVEX\n    //////////////////////////////////////////////////////////////*/\n\n    /** @notice Interal change pool Logic\n    */\n    function _changePool() private {\n        uint256 _newPId = newPId;\n        address _newCurve = newCurve;\n        IERC20 _newLPToken = newLPToken;\n        address _newReward = newRewardContract;\n\n        pId = _newPId;\n        curve = _newCurve;\n        lpToken = _newLPToken;\n        rewardContract = _newReward;\n\n        newCurve = address(0);\n        newPId = 0;\n        newLPToken = IERC20(address(0));\n        newRewardContract = address(0);\n\n        emit LogChangePool(_newPId, address(_newLPToken), _newReward, _newCurve);\n    }\n\n    /** @notice Remove all assets into want and sell of rewards\n    */\n    function _withdrawAll() private {\n        Rewards(rewardContract).withdrawAllAndUnwrap(true);\n        _sellBasic();\n\n        // remove liquidity from metapool\n        uint256 lpAmount = lpToken.balanceOf(address(this));\n        ICurveMetaPool _meta = ICurveMetaPool(curve);\n        uint256 vp = _meta.get_virtual_price();\n        _meta.remove_liquidity_one_coin(lpAmount, CRV3_INDEX, 0);\n\n        // calc min amounts\n        uint256 minAmount = (lpAmount * vp) / 1E18;\n        minAmount =\n            (minAmount - (minAmount * slippage) / 10000) /\n            (1E18 / 10**IERC20Detailed(address(want)).decimals());\n\n        // remove liquidity from 3pool\n        lpAmount = CRV_3POOL_TOKEN.balanceOf(address(this));\n        ICurve3Deposit(CRV_3POOL).remove_liquidity_one_coin(lpAmount, WANT_INDEX, minAmount);\n    }\n\n    /** @notice Calculate meta pool token value of want\n    */\n    function wantToLp(uint256 amount) private view returns (uint256 lpAmount) {\n        uint256[CRV_3POOL_LEN] memory amountsCRV3;\n        amountsCRV3[uint256(int256(WANT_INDEX))] = amount;\n\n        uint256 crv3Amount = ICurve3Pool(CRV_3POOL).calc_token_amount(amountsCRV3, false);\n\n        uint256[CRV_METAPOOL_LEN] memory amountsMP;\n        amountsMP[uint256(int256(CRV3_INDEX))] = crv3Amount;\n\n        lpAmount = ICurveMetaPool(curve).calc_token_amount(amountsMP, false);\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                            DEX\n    //////////////////////////////////////////////////////////////*/\n\n    /** @notice Sell reward tokens (crv + cvx)\n    */\n    function _sellBasic() private {\n        uint256 crv = IERC20(CRV).balanceOf(address(this));\n        if (crv > 0) {\n            IUni(dex[0]).swapExactTokensForTokens(\n                crv,\n                uint256(0),\n                _getPath(CRV, TO_WANT),\n                address(this),\n                block.timestamp\n            );\n        }\n        uint256 cvx = IERC20(CVX).balanceOf(address(this));\n        if (cvx > 0) {\n            IUni(dex[1]).swapExactTokensForTokens(\n                cvx,\n                uint256(0),\n                _getPath(CVX, TO_WANT),\n                address(this),\n                block.timestamp\n            );\n        }\n    }\n\n    /** @notice Calculate values of rewards tokens (crv + cvx)\n    */\n    function _claimableBasic(uint256 toIndex) private view returns (uint256) {\n        uint256 crv = Rewards(rewardContract).earned(address(this));\n\n        // calculations pulled directly from CVX's contract for minting CVX per CRV claimed\n        uint256 supply = IERC20(CVX).totalSupply();\n        uint256 cvx;\n\n        uint256 cliff = supply / reductionPerCliff;\n        // mint if below total cliffs\n        if (cliff < totalCliffs) {\n            // for reduction% take inverse of current cliff\n            uint256 reduction = totalCliffs - cliff;\n            // reduce\n            cvx = (crv * reduction) / totalCliffs;\n\n            // supply cap check\n            uint256 amtTillMax = maxSupply - supply;\n            if (cvx > amtTillMax) {\n                cvx = amtTillMax;\n            }\n        }\n\n        uint256 crvValue;\n        if (crv > 0) {\n            uint256[] memory crvSwap = IUni(dex[0]).getAmountsOut(crv, _getPath(CRV, toIndex));\n            crvValue = crvSwap[crvSwap.length - 1];\n        }\n\n        uint256 cvxValue;\n        if (cvx > 0) {\n            uint256[] memory cvxSwap = IUni(dex[1]).getAmountsOut(cvx, _getPath(CVX, toIndex));\n            cvxValue = cvxSwap[cvxSwap.length - 1];\n        }\n\n        return crvValue + cvxValue;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                            CORE\n    //////////////////////////////////////////////////////////////*/\n\n    /** @notice Add available assets to the curve/convex pool\n    *   @param _debtOutstanding any debt that is owed to the vault,\n    *       should be 0 at this point\n    */\n    function adjustPosition(uint256 _debtOutstanding) internal override {\n        if (emergencyExit) return;\n        uint256 wantBal = want.balanceOf(address(this));\n        if (wantBal > 0) {\n            uint256[CRV_3POOL_LEN] memory amountsCRV3;\n            amountsCRV3[uint256(int256(WANT_INDEX))] = wantBal;\n\n            ICurve3Deposit(CRV_3POOL).add_liquidity(amountsCRV3, 0);\n\n            uint256 crv3Bal = CRV_3POOL_TOKEN.balanceOf(address(this));\n            if (crv3Bal > 0) {\n                uint256[CRV_METAPOOL_LEN] memory amountsMP;\n                amountsMP[uint256(int256(CRV3_INDEX))] = crv3Bal;\n                ICurveMetaPool _meta = ICurveMetaPool(curve);\n\n                uint256 vp = _meta.get_virtual_price();\n                uint256 minAmount = (wantBal * (1E36 / 10**IERC20Detailed(address(want)).decimals())) / vp;\n\n                minAmount = minAmount - (minAmount * slippage) / 10000;\n                _meta.add_liquidity(amountsMP, minAmount);\n\n                uint256 lpBal = lpToken.balanceOf(address(this));\n                if (lpBal > 0) {\n                    Booster(BOOSTER).deposit(pId, lpBal, true);\n                }\n            }\n        }\n    }\n\n    /** @notice Atempt to remove assets from the curve/convex pool,\n    *       reports a loss is we withdraw less than the required amount\n    *   @param _amountNeeded Amount to remove\n    */\n    function liquidatePosition(uint256 _amountNeeded)\n        internal\n        override\n        returns (uint256 _liquidatedAmount, uint256 _loss)\n    {\n        uint256 _wantBal = want.balanceOf(address(this));\n        if (_wantBal < _amountNeeded) {\n            _liquidatedAmount = _withdrawSome(_amountNeeded - _wantBal);\n            _liquidatedAmount = _liquidatedAmount + _wantBal;\n            _liquidatedAmount = Math.min(_liquidatedAmount, _amountNeeded);\n            if (_liquidatedAmount < _amountNeeded) {\n                _loss = _amountNeeded - _liquidatedAmount;\n            }\n        } else {\n            _liquidatedAmount = _amountNeeded;\n        }\n    }\n\n    /** @notice Withdraw assets from curve/convex pool\n    *   @param _amount Amount to withdraw\n    */\n    function _withdrawSome(uint256 _amount) private returns (uint256) {\n        uint256 lpAmount = wantToLp(_amount);\n        lpAmount = lpAmount + (lpAmount * slippageRecover) / 10000;\n        uint256 poolBal = Rewards(rewardContract).balanceOf(address(this));\n\n        if (poolBal < lpAmount) {\n            lpAmount = poolBal;\n        }\n\n        if (poolBal == 0) return 0;\n\n        uint256 before = want.balanceOf(address(this));\n\n        // withdraw from convex\n        Rewards(rewardContract).withdrawAndUnwrap(lpAmount, false);\n\n        // remove liquidity from metapool\n        lpAmount = lpToken.balanceOf(address(this));\n        ICurveMetaPool(curve).remove_liquidity_one_coin(lpAmount, CRV3_INDEX, 0);\n\n        // remove liquidity from 3pool\n        lpAmount = CRV_3POOL_TOKEN.balanceOf(address(this));\n\n        uint256 minAmount = _amount - (_amount * slippage) / 10000;\n        ICurve3Deposit(CRV_3POOL).remove_liquidity_one_coin(lpAmount, WANT_INDEX, minAmount);\n\n        return want.balanceOf(address(this)) - before;\n    }\n\n    /** @notice Do strategy accounting to determine potential gains/losses and\n    *       pay back any outstanding debt to the vault.\n    *   @dev If a new curve/convex pair has been set, the the strategy will remove\n    *       all assets from the old pair, sell of all rewards and prepare the migration\n    *       to the new pair in this function.\n    *   @param _debtOutstanding Amount of debt owed to the vault\n    */\n    function prepareReturn(uint256 _debtOutstanding)\n        internal\n        override\n        returns (\n            uint256 _profit,\n            uint256 _loss,\n            uint256 _debtPayment\n        )\n    {\n        uint256 total;\n        uint256 wantBal;\n        uint256 beforeTotal;\n        uint256 debt = vault.strategies(address(this)).totalDebt;\n        if (curve == address(0)) {\n            // invest into strategy first time\n            _changePool();\n            return (0, 0, 0);\n        } else if (newCurve != address(0)) {\n            // swap the pool\n            beforeTotal = _estimatedTotalAssets(true);\n            _withdrawAll();\n            _changePool();\n            wantBal = want.balanceOf(address(this));\n            total = wantBal;\n\n            if (beforeTotal < debt) {\n                total = Math.max(beforeTotal, total);\n            } else if (beforeTotal > debt && total < debt) {\n                total = debt;\n            }\n        } else {\n            Rewards(rewardContract).getReward();\n            _sellBasic();\n            total = _estimatedTotalAssets(false);\n            wantBal = want.balanceOf(address(this));\n        }\n        _debtPayment = _debtOutstanding;\n        if (total > debt) {\n            _profit = total - debt;\n            uint256 amountToFree = _profit + _debtPayment;\n            if (amountToFree > 0 && wantBal < amountToFree) {\n                _withdrawSome(amountToFree - wantBal);\n                total = _estimatedTotalAssets(false);\n                wantBal = want.balanceOf(address(this));\n                if (total <= debt) {\n                    _profit = 0;\n                    _loss = debt - total;\n                } else {\n                    _profit = total - debt;\n                }\n                amountToFree = _profit + _debtPayment;\n                if (wantBal < amountToFree) {\n                    if (_profit > wantBal) {\n                        _profit = wantBal;\n                        _debtPayment = 0;\n                    } else {\n                        _debtPayment = Math.min(wantBal - _profit, _debtPayment);\n                    }\n                }\n            }\n        } else {\n            _loss = debt - total;\n            uint256 amountToFree = _debtPayment;\n            if (amountToFree > 0 && wantBal < amountToFree) {\n                _withdrawSome(amountToFree - wantBal);\n                wantBal = want.balanceOf(address(this));\n                if (wantBal < amountToFree) {\n                    _debtPayment = wantBal;\n                }\n            }\n        }\n    }\n\n    function tendTrigger(uint256 callCost) public pure override returns (bool) {\n        callCost;\n        return false;\n    }\n\n    /** @notice Check if strategy need to be harvested\n    *   @param callCost Estimated cost of calling harvest in ETH\n    */\n    function harvestTrigger(uint256 callCost) public view override returns (bool) {\n        StrategyParams memory params = vault.strategies(address(this));\n\n        if (params.activation == 0) return false;\n\n        if (block.timestamp - params.lastReport < minReportDelay) return false;\n\n        if (block.timestamp - params.lastReport >= maxReportDelay) return true;\n\n        uint256 outstanding = vault.debtOutstanding();\n        if (outstanding > debtThreshold) return true;\n\n        uint256 total = estimatedTotalAssets();\n        if (total + debtThreshold < params.totalDebt) return true;\n\n        uint256 profit;\n        if (total > params.totalDebt) {\n            profit = total - params.totalDebt;\n        }\n\n        return (profitFactor * callCost < _wantToETH(profit));\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                    UTILITY\n    //////////////////////////////////////////////////////////////*/\n\n    /** @notice Get path for uni style pool swap\n    */\n    function _getPath(address from, uint256 toIndex) private view returns (address[] memory path) {\n        if (toIndex == TO_ETH) {\n            path = new address[](2);\n            path[0] = from;\n            path[1] = WETH;\n        }\n\n        if (toIndex == TO_WANT) {\n            path = new address[](3);\n            path[0] = from;\n            path[1] = WETH;\n            path[2] = address(want);\n        }\n    }\n\n    function prepareMigration(address _newStrategy) internal override {\n        _newStrategy;\n        _withdrawAll();\n    }\n\n    function protectedTokens() internal pure override returns (address[] memory) {\n        address[] memory protected = new address[](2);\n        protected[0] = CRV;\n        protected[1] = CVX;\n        return protected;\n    }\n\n    function _wantToETH(uint256 wantAmount) private view returns (uint256) {\n        if (wantAmount > 0) {\n            address[] memory path = new address[](2);\n            path[0] = address(want);\n            path[1] = WETH;\n            uint256[] memory amounts = IUni(dex[0]).getAmountsOut(wantAmount, path);\n            return amounts[1];\n        }\n    }\n}\n"
    },
    "./contracts/BaseStrategy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nstruct StrategyParams {\n    uint256 activation;\n    uint256 debtRatio;\n    uint256 minDebtPerHarvest;\n    uint256 maxDebtPerHarvest;\n    uint256 lastReport;\n    uint256 totalDebt;\n    uint256 totalGain;\n    uint256 totalLoss;\n}\n\ninterface VaultAPI {\n    function decimals() external view returns (uint256);\n\n    function token() external view returns (address);\n\n    function vaultAdapter() external view returns (address);\n\n    function strategies(address _strategy) external view returns (StrategyParams memory);\n\n    /**\n     * View how much the Vault would increase this Strategy's borrow limit,\n     * based on its present performance (since its last report). Can be used to\n     * determine expectedReturn in your Strategy.\n     */\n    function creditAvailable() external view returns (uint256);\n\n    /**\n     * View how much the Vault would like to pull back from the Strategy,\n     * based on its present performance (since its last report). Can be used to\n     * determine expectedReturn in your Strategy.\n     */\n    function debtOutstanding() external view returns (uint256);\n\n    /**\n     * View how much the Vault expect this Strategy to return at the current\n     * block, based on its present performance (since its last report). Can be\n     * used to determine expectedReturn in your Strategy.\n     */\n    function expectedReturn() external view returns (uint256);\n\n    /**\n     * This is the main contact point where the Strategy interacts with the\n     * Vault. It is critical that this call is handled as intended by the\n     * Strategy. Therefore, this function will be called by BaseStrategy to\n     * make sure the integration is correct.\n     */\n    function report(\n        uint256 _gain,\n        uint256 _loss,\n        uint256 _debtPayment\n    ) external returns (uint256);\n\n    /**\n     * This function should only be used in the scenario where the Strategy is\n     * being retired but no migration of the positions are possible, or in the\n     * extreme scenario that the Strategy needs to be put into \"Emergency Exit\"\n     * mode in order for it to exit as quickly as possible. The latter scenario\n     * could be for any reason that is considered \"critical\" that the Strategy\n     * exits its position as fast as possible, such as a sudden change in\n     * market conditions leading to losses, or an imminent failure in an\n     * external dependency.\n     */\n    function revokeStrategy() external;\n\n    function governance() external view returns (address);\n}\n\n/**\n * This interface is here for the keeper bot to use.\n */\ninterface StrategyAPI {\n    function name() external view returns (string memory);\n\n    function vault() external view returns (address);\n\n    function want() external view returns (address);\n\n    function keeper() external view returns (address);\n\n    function isActive() external view returns (bool);\n\n    function estimatedTotalAssets() external view returns (uint256);\n\n    function expectedReturn() external view returns (uint256);\n\n    function tendTrigger(uint256 callCost) external view returns (bool);\n\n    function tend() external;\n\n    function harvestTrigger(uint256 callCost) external view returns (bool);\n\n    function harvest() external;\n\n    event Harvested(uint256 profit, uint256 loss, uint256 debtPayment, uint256 debtOutstanding);\n}\n\n/**\n * @title Yearn Base Strategy\n * @author orig. yearn.finance, modified by gro-protocol\n * @notice\n *  BaseStrategy implements all of the required functionality to interoperate\n *  closely with the Vault contract. This contract should be inherited and the\n *  abstract methods implemented to adapt the Strategy to the particular needs\n *  it has to create a return.\n *\n *  Of special interest is the relationship between `harvest()` and\n *  `vault.report()'. `harvest()` may be called simply because enough time has\n *  elapsed since the last report, and not because any funds need to be moved\n *  or positions adjusted. This is critical so that the Vault may maintain an\n *  accurate picture of the Strategy's performance. See  `vault.report()`,\n *  `harvest()`, and `harvestTrigger()` for further details.\n */\nabstract contract BaseStrategy {\n    using SafeERC20 for IERC20;\n\n    VaultAPI public vault;\n    address public rewards;\n    address public keeper;\n\n    IERC20 public want;\n\n    // So indexers can keep track of this\n    event Harvested(uint256 profit, uint256 loss, uint256 debtPayment, uint256 debtOutstanding);\n    event UpdatedKeeper(address newKeeper);\n    event UpdatedRewards(address rewards);\n    event UpdatedMinReportDelay(uint256 delay);\n    event UpdatedMaxReportDelay(uint256 delay);\n    event UpdatedProfitFactor(uint256 profitFactor);\n    event UpdatedDebtThreshold(uint256 debtThreshold);\n    event EmergencyExitEnabled();\n\n    // The minimum number of seconds between harvest calls. See\n    // `setMinReportDelay()` for more details.\n    uint256 public minReportDelay;\n\n    // The maximum number of seconds between harvest calls. See\n    // `setMaxReportDelay()` for more details.\n    uint256 public maxReportDelay;\n\n    // The minimum multiple that `callCost` must be above the credit/profit to\n    // be \"justifiable\". See `setProfitFactor()` for more details.\n    uint256 public profitFactor;\n\n    // Use this to adjust the threshold at which running a debt causes a\n    // harvest trigger. See `setDebtThreshold()` for more details.\n    uint256 public debtThreshold;\n\n    // See note on `setEmergencyExit()`.\n    bool public emergencyExit;\n\n    // modifiers\n    modifier onlyAuthorized() {\n        require(msg.sender == keeper || msg.sender == owner(), \"!authorized\");\n        _;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner(), \"!authorized\");\n        _;\n    }\n\n    constructor(address _vault) {\n        _initialize(_vault, msg.sender, msg.sender);\n    }\n\n    function name() external view virtual returns (string memory);\n\n    /**\n     * @notice\n     *  Initializes the Strategy, this is called only once, when the\n     *  contract is deployed.\n     * @param _vault The address of the Vault responsible for this Strategy.\n     */\n    function _initialize(\n        address _vault,\n        address _rewards,\n        address _keeper\n    ) internal {\n        require(address(want) == address(0), \"Strategy already initialized\");\n\n        vault = VaultAPI(_vault);\n        want = IERC20(vault.token());\n        want.safeApprove(_vault, type(uint256).max); // Give Vault unlimited access (might save gas)\n        rewards = _rewards;\n        keeper = _keeper;\n\n        // initialize variables\n        minReportDelay = 0;\n        maxReportDelay = 86400;\n        profitFactor = 100;\n        debtThreshold = 0;\n    }\n\n    function setKeeper(address _keeper) external onlyOwner {\n        require(_keeper != address(0));\n        keeper = _keeper;\n        emit UpdatedKeeper(_keeper);\n    }\n\n    /**\n     * @notice\n     *  Used to change `minReportDelay`. `minReportDelay` is the minimum number\n     *  of blocks that should pass for `harvest()` to be called.\n     *\n     *  For external keepers (such as the Keep3r network), this is the minimum\n     *  time between jobs to wait. (see `harvestTrigger()`\n     *  for more details.)\n     *\n     * @param _delay The minimum number of seconds to wait between harvests.\n     */\n    function setMinReportDelay(uint256 _delay) external onlyAuthorized {\n        minReportDelay = _delay;\n        emit UpdatedMinReportDelay(_delay);\n    }\n\n    /**\n     * @notice\n     *  Used to change `maxReportDelay`. `maxReportDelay` is the maximum number\n     *  of blocks that should pass for `harvest()` to be called.\n     *\n     *  For external keepers (such as the Keep3r network), this is the maximum\n     *  time between jobs to wait. (see `harvestTrigger()`\n     *  for more details.)\n     *\n     * @param _delay The maximum number of seconds to wait between harvests.\n     */\n    function setMaxReportDelay(uint256 _delay) external onlyAuthorized {\n        maxReportDelay = _delay;\n        emit UpdatedMaxReportDelay(_delay);\n    }\n\n    /**\n     * @notice\n     *  Used to change `profitFactor`. `profitFactor` is used to determine\n     *  if it's worthwhile to harvest, given gas costs. (See `harvestTrigger()`\n     *  for more details.)\n     *\n     * @param _profitFactor A ratio to multiply anticipated\n     * `harvest()` gas cost against.\n     */\n    function setProfitFactor(uint256 _profitFactor) external onlyAuthorized {\n        profitFactor = _profitFactor;\n        emit UpdatedProfitFactor(_profitFactor);\n    }\n\n    /**\n     * @notice\n     *  Sets how far the Strategy can go into loss without a harvest and report\n     *  being required.\n     *\n     *  By default this is 0, meaning any losses would cause a harvest which\n     *  will subsequently report the loss to the Vault for tracking. (See\n     *  `harvestTrigger()` for more details.)\n     *\n     * @param _debtThreshold How big of a loss this Strategy may carry without\n     * being required to report to the Vault.\n     */\n    function setDebtThreshold(uint256 _debtThreshold) external onlyAuthorized {\n        debtThreshold = _debtThreshold;\n        emit UpdatedDebtThreshold(_debtThreshold);\n    }\n\n    /**\n     * Resolve owner address from Vault contract, used to make assertions\n     * on protected functions in the Strategy.\n     */\n    function owner() internal view returns (address) {\n        return vault.governance();\n    }\n\n    /**\n     * @notice\n     *  Provide an accurate estimate for the total amount of assets\n     *  (principle + return) that this Strategy is currently managing,\n     *  denominated in terms of `want` tokens.\n     *\n     *  This total should be \"realizable\" e.g. the total value that could\n     *  *actually* be obtained from this Strategy if it were to divest its\n     *  entire position based on current on-chain conditions.\n     * @dev\n     *  Care must be taken in using this function, since it relies on external\n     *  systems, which could be manipulated by the attacker to give an inflated\n     *  (or reduced) value produced by this function, based on current on-chain\n     *  conditions (e.g. this function is possible to influence through\n     *  flashloan attacks, oracle manipulations, or other DeFi attack\n     *  mechanisms).\n     *\n     *  It is up to owner to use this function to correctly order this\n     *  Strategy relative to its peers in the withdrawal queue to minimize\n     *  losses for the Vault based on sudden withdrawals. This value should be\n     *  higher than the total debt of the Strategy and higher than its expected\n     *  value to be \"safe\".\n     * @return The estimated total assets in this Strategy.\n     */\n    function estimatedTotalAssets() public view virtual returns (uint256);\n\n    /*\n     * @notice\n     *  Provide an indication of whether this strategy is currently \"active\"\n     *  in that it is managing an active position, or will manage a position in\n     *  the future. This should correlate to `harvest()` activity, so that Harvest\n     *  events can be tracked externally by indexing agents.\n     * @return True if the strategy is actively managing a position.\n     */\n    function isActive() public view returns (bool) {\n        return vault.strategies(address(this)).debtRatio > 0 || estimatedTotalAssets() > 0;\n    }\n\n    /**\n     * Perform any Strategy unwinding or other calls necessary to capture the\n     * \"free return\" this Strategy has generated since the last time its core\n     * position(s) were adjusted. Examples include unwrapping extra rewards.\n     * This call is only used during \"normal operation\" of a Strategy, and\n     * should be optimized to minimize losses as much as possible.\n     *\n     * This method returns any realized profits and/or realized losses\n     * incurred, and should return the total amounts of profits/losses/debt\n     * payments (in `want` tokens) for the Vault's accounting (e.g.\n     * `want.balanceOf(this) >= _debtPayment + _profit - _loss`).\n     *\n     * `_debtOutstanding` will be 0 if the Strategy is not past the configured\n     * debt limit, otherwise its value will be how far past the debt limit\n     * the Strategy is. The Strategy's debt limit is configured in the Vault.\n     *\n     * NOTE: `_debtPayment` should be less than or equal to `_debtOutstanding`.\n     *       It is okay for it to be less than `_debtOutstanding`, as that\n     *       should only used as a guide for how much is left to pay back.\n     *       Payments should be made to minimize loss from slippage, debt,\n     *       withdrawal fees, etc.\n     *\n     * See `vault.debtOutstanding()`.\n     */\n    function prepareReturn(uint256 _debtOutstanding)\n        internal\n        virtual\n        returns (\n            uint256 _profit,\n            uint256 _loss,\n            uint256 _debtPayment\n        );\n\n    /**\n     * Perform any adjustments to the core position(s) of this Strategy given\n     * what change the Vault made in the \"investable capital\" available to the\n     * Strategy. Note that all \"free capital\" in the Strategy after the report\n     * was made is available for reinvestment. Also note that this number\n     * could be 0, and you should handle that scenario accordingly.\n     *\n     * See comments regarding `_debtOutstanding` on `prepareReturn()`.\n     */\n    function adjustPosition(uint256 _debtOutstanding) internal virtual;\n\n    /**\n     * Liquidate up to `_amountNeeded` of `want` of this strategy's positions,\n     * irregardless of slippage. Any excess will be re-invested with `adjustPosition()`.\n     * This function should return the amount of `want` tokens made available by the\n     * liquidation. If there is a difference between them, `_loss` indicates whether the\n     * difference is due to a realized loss, or if there is some other sitution at play\n     * (e.g. locked funds) where the amount made available is less than what is needed.\n     * This function is used during emergency exit instead of `prepareReturn()` to\n     * liquidate all of the Strategy's positions back to the Vault.\n     *\n     * NOTE: The invariant `_liquidatedAmount + _loss <= _amountNeeded` should always be maintained\n     */\n    function liquidatePosition(uint256 _amountNeeded)\n        internal\n        virtual\n        returns (uint256 _liquidatedAmount, uint256 _loss);\n\n    /**\n     * @notice\n     *  Provide a signal to the keeper that `tend()` should be called. The\n     *  keeper will provide the estimated gas cost that they would pay to call\n     *  `tend()`, and this function should use that estimate to make a\n     *  determination if calling it is \"worth it\" for the keeper. This is not\n     *  the only consideration into issuing this trigger, for example if the\n     *  position would be negatively affected if `tend()` is not called\n     *  shortly, then this can return `true` even if the keeper might be\n     *  \"at a loss\" (keepers are always reimbursed by Yearn).\n     * @dev\n     *  `callCost` must be priced in terms of `want`.\n     *\n     *  This call and `harvestTrigger()` should never return `true` at the same\n     *  time.\n     * @param callCost The keeper's estimated cast cost to call `tend()`.\n     * @return `true` if `tend()` should be called, `false` otherwise.\n     */\n    function tendTrigger(uint256 callCost) public view virtual returns (bool);\n\n    /**\n     * @notice\n     *  Adjust the Strategy's position. The purpose of tending isn't to\n     *  realize gains, but to maximize yield by reinvesting any returns.\n     *\n     *  See comments on `adjustPosition()`.\n     *\n     */\n    function tend() external onlyAuthorized {\n        // Don't take profits with this call, but adjust for better gains\n        adjustPosition(vault.debtOutstanding());\n    }\n\n    /**\n     * @notice\n     *  Provide a signal to the keeper that `harvest()` should be called. The\n     *  keeper will provide the estimated gas cost that they would pay to call\n     *  `harvest()`, and this function should use that estimate to make a\n     *  determination if calling it is \"worth it\" for the keeper. This is not\n     *  the only consideration into issuing this trigger, for example if the\n     *  position would be negatively affected if `harvest()` is not called\n     *  shortly, then this can return `true` even if the keeper might be \"at a\n     *  loss\" (keepers are always reimbursed by Yearn).\n     * @dev\n     *  `callCost` must be priced in terms of `want`.\n     *\n     *  This call and `tendTrigger` should never return `true` at the\n     *  same time.\n     *\n     *  See `min/maxReportDelay`, `profitFactor`, `debtThreshold`\n     *  -controlled parameters that will influence whether this call\n     *  returns `true` or not. These parameters will be used in conjunction\n     *  with the parameters reported to the Vault (see `params`) to determine\n     *  if calling `harvest()` is merited.\n     *\n     *  It is expected that an external system will check `harvestTrigger()`.\n     *  This could be a script run off a desktop or cloud bot (e.g.\n     *  https://github.com/iearn-finance/yearn-vaults/blob/master/scripts/keep.py),\n     *  or via an integration with the Keep3r network (e.g.\n     *  https://github.com/Macarse/GenericKeep3rV2/blob/master/contracts/keep3r/GenericKeep3rV2.sol).\n     * @param callCost The keeper's estimated cast cost to call `harvest()`.\n     * @return `true` if `harvest()` should be called, `false` otherwise.\n     */\n    function harvestTrigger(uint256 callCost) public view virtual returns (bool) {\n        StrategyParams memory params = vault.strategies(address(this));\n\n        // Should not trigger if Strategy is not activated\n        if (params.activation == 0) return false;\n\n        // Should not trigger if we haven't waited long enough since previous harvest\n        if (block.timestamp - params.lastReport < minReportDelay) return false;\n\n        // Should trigger if hasn't been called in a while\n        if (block.timestamp - params.lastReport >= maxReportDelay) return true;\n\n        // If some amount is owed, pay it back\n        // NOTE: Since debt is based on deposits, it makes sense to guard against large\n        //       changes to the value from triggering a harvest directly through user\n        //       behavior. This should ensure reasonable resistance to manipulation\n        //       from user-initiated withdrawals as the outstanding debt fluctuates.\n        uint256 outstanding = vault.debtOutstanding();\n        if (outstanding > debtThreshold) return true;\n\n        // Check for profits and losses\n        uint256 total = estimatedTotalAssets();\n        // Trigger if we have a loss to report\n        if (total + debtThreshold < params.totalDebt) return true;\n\n        uint256 profit = 0;\n        if (total > params.totalDebt) profit = total - params.totalDebt; // We've earned a profit!\n\n        // Otherwise, only trigger if it \"makes sense\" economically (gas cost\n        // is <N% of value moved)\n        uint256 credit = vault.creditAvailable();\n        return (profitFactor * callCost < credit + profit);\n    }\n\n    /**\n     * @notice\n     *  Harvests the Strategy, recognizing any profits or losses and adjusting\n     *  the Strategy's position.\n     *\n     *  In the rare case the Strategy is in emergency shutdown, this will exit\n     *  the Strategy's position.\n     *\n     * @dev\n     *  When `harvest()` is called, the Strategy reports to the Vault (via\n     *  `vault.report()`), so in some cases `harvest()` must be called in order\n     *  to take in profits, to borrow newly available funds from the Vault, or\n     *  otherwise adjust its position. In other cases `harvest()` must be\n     *  called to report to the Vault on the Strategy's position, especially if\n     *  any losses have occurred.\n     */\n    function harvest() external {\n        require(msg.sender == vault.vaultAdapter(), \"harvest: Call from vault\");\n        uint256 profit = 0;\n        uint256 loss = 0;\n        uint256 debtOutstanding = vault.debtOutstanding();\n        uint256 debtPayment = 0;\n        if (emergencyExit) {\n            // Free up as much capital as possible\n            uint256 totalAssets = estimatedTotalAssets();\n            // NOTE: use the larger of total assets or debt outstanding to book losses properly\n            (debtPayment, loss) = liquidatePosition(totalAssets > debtOutstanding ? totalAssets : debtOutstanding);\n            // NOTE: take up any remainder here as profit\n            if (debtPayment > debtOutstanding) {\n                profit = debtPayment - debtOutstanding;\n                debtPayment = debtOutstanding;\n            }\n        } else {\n            // Free up returns for Vault to pull\n            (profit, loss, debtPayment) = prepareReturn(debtOutstanding);\n        }\n        // Allow Vault to take up to the \"harvested\" balance of this contract,\n        // which is the amount it has earned since the last time it reported to\n        // the Vault.\n        debtOutstanding = vault.report(profit, loss, debtPayment);\n\n        // Check if free returns are left, and re-invest them\n        adjustPosition(debtOutstanding);\n\n        emit Harvested(profit, loss, debtPayment, debtOutstanding);\n    }\n\n    /**\n     * @notice\n     *  Withdraws `_amountNeeded` to `vault`.\n     *\n     *  This may only be called by the Vault.\n     * @param _amountNeeded How much `want` to withdraw.\n     * @return _loss Any realized losses\n     */\n    function withdraw(uint256 _amountNeeded) external returns (uint256 _loss) {\n        require(msg.sender == address(vault), \"!vault\");\n        // Liquidate as much as possible to `want`, up to `_amountNeeded`\n        uint256 amountFreed;\n        (amountFreed, _loss) = liquidatePosition(_amountNeeded);\n        // Send it directly back (NOTE: Using `msg.sender` saves some gas here)\n        want.safeTransfer(msg.sender, amountFreed);\n        // NOTE: Reinvest anything leftover on next `tend`/`harvest`\n    }\n\n    /**\n     * Do anything necessary to prepare this Strategy for migration, such as\n     * transferring any reserve or LP tokens, CDPs, or other tokens or stores of\n     * value.\n     */\n    function prepareMigration(address _newStrategy) internal virtual;\n\n    /**\n     * @notice\n     *  Transfers all `want` from this Strategy to `_newStrategy`.\n     *\n     *  This may only be called by owner or the Vault.\n     * @dev\n     *  The new Strategy's Vault must be the same as this Strategy's Vault.\n     * @param _newStrategy The Strategy to migrate to.\n     */\n    function migrate(address _newStrategy) external {\n        require(msg.sender == address(vault));\n        require(BaseStrategy(_newStrategy).vault() == vault);\n        prepareMigration(_newStrategy);\n        want.safeTransfer(_newStrategy, want.balanceOf(address(this)));\n    }\n\n    /**\n     * @notice\n     *  Activates emergency exit. Once activated, the Strategy will exit its\n     *  position upon the next harvest, depositing all funds into the Vault as\n     *  quickly as is reasonable given on-chain conditions.\n     *\n     * @dev\n     *  See `vault.setEmergencyShutdown()` and `harvest()` for further details.\n     */\n    function setEmergencyExit() external onlyAuthorized {\n        emergencyExit = true;\n        vault.revokeStrategy();\n\n        emit EmergencyExitEnabled();\n    }\n\n    /**\n     * Override this to add all tokens/tokenized positions this contract\n     * manages on a *persistent* basis (e.g. not just for swapping back to\n     * want ephemerally).\n     *\n     * NOTE: Do *not* include `want`, already included in `sweep` below.\n     *\n     * Example:\n     *\n     *    function protectedTokens() internal override view returns (address[] memory) {\n     *      address[] memory protected = new address[](3);\n     *      protected[0] = tokenA;\n     *      protected[1] = tokenB;\n     *      protected[2] = tokenC;\n     *      return protected;\n     *    }\n     */\n    function protectedTokens() internal view virtual returns (address[] memory);\n\n    /**\n     * @notice\n     *  Removes tokens from this Strategy that are not the type of tokens\n     *  managed by this Strategy. This may be used in case of accidentally\n     *  sending the wrong kind of token to this Strategy.\n     *\n     *  Tokens will be sent to `owner()`.\n     *\n     *  This will fail if an attempt is made to sweep `want`, or any tokens\n     *  that are protected by this Strategy.\n     *\n     *  This may only be called by owner.\n     * @dev\n     *  Implement `protectedTokens()` to specify any additional tokens that\n     *  should be protected from sweeping in addition to `want`.\n     * @param _token The token to transfer out of this vault.\n     */\n    function sweep(address _token) external onlyOwner {\n        require(_token != address(want), \"!want\");\n        require(_token != address(vault), \"!shares\");\n\n        address[] memory _protectedTokens = protectedTokens();\n        for (uint256 i; i < _protectedTokens.length; i++) require(_token != _protectedTokens[i], \"!protected\");\n\n        IERC20(_token).safeTransfer(owner(), IERC20(_token).balanceOf(address(this)));\n    }\n}\n"
    },
    "./contracts/interfaces/IERC20Detailed.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.8.4;\n\ninterface IERC20Detailed {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n"
    },
    "./contracts/interfaces/ICurve.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.8.4;\n\ninterface ICurve3Pool {\n    function coins(uint256 i) external view returns (address);\n\n    function get_virtual_price() external view returns (uint256);\n\n    function get_dy(\n        int128 i,\n        int128 j,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\n\n    function calc_token_amount(uint256[3] calldata inAmounts, bool deposit) external view returns (uint256);\n\n    function balances(uint256 i) external view returns (uint256);\n}\n\ninterface ICurve3Deposit {\n    function exchange(\n        int128 i,\n        int128 j,\n        uint256 dx,\n        uint256 min_dy\n    ) external;\n\n    function add_liquidity(uint256[3] calldata uamounts, uint256 min_mint_amount) external;\n\n    function remove_liquidity(uint256 amount, uint256[3] calldata min_uamounts) external;\n\n    function remove_liquidity_imbalance(uint256[3] calldata amounts, uint256 max_burn_amount) external;\n\n    function remove_liquidity_one_coin(\n        uint256 _token_amount,\n        int128 i,\n        uint256 min_uamount\n    ) external;\n\n    function get_dy(\n        int128 i,\n        int128 j,\n        uint256 dx\n    ) external view returns (uint256);\n}\n\ninterface ICurveMetaPool {\n    function coins(uint256 i) external view returns (address);\n\n    function get_virtual_price() external view returns (uint256);\n\n    function get_dy_underlying(\n        int128 i,\n        int128 j,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\n\n    function calc_token_amount(uint256[2] calldata inAmounts, bool deposit) external view returns (uint256);\n\n    function exchange(\n        int128 i,\n        int128 j,\n        uint256 dx,\n        uint256 min_dy\n    ) external;\n\n    function add_liquidity(uint256[2] calldata uamounts, uint256 min_mint_amount) external;\n\n    function remove_liquidity_one_coin(\n        uint256 _token_amount,\n        int128 i,\n        uint256 min_uamount\n    ) external;\n}\n\ninterface ICurveZap {\n    function add_liquidity(uint256[4] calldata uamounts, uint256 min_mint_amount) external;\n\n    function remove_liquidity(uint256 amount, uint256[4] calldata min_uamounts) external;\n\n    function remove_liquidity_imbalance(uint256[4] calldata amounts, uint256 max_burn_amount) external;\n\n    function remove_liquidity_one_coin(\n        uint256 _token_amount,\n        int128 i,\n        uint256 min_uamount\n    ) external;\n\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\n\n    function calc_token_amount(uint256[4] calldata inAmounts, bool deposit) external view returns (uint256);\n\n    function pool() external view returns (address);\n}\n"
    },
    "./contracts/interfaces/UniSwap/IUni.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.8.4;\n\ninterface IUni {\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    }
  }
}}