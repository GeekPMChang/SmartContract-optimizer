{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n        __ERC165_init_unchained();\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/core/Raid.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {AccessControlUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport {IConfetti} from \"../interfaces/IConfetti.sol\";\nimport {IParty} from \"../interfaces/IParty.sol\";\nimport {IRaid} from \"../interfaces/IRaid.sol\";\nimport {ISeeder} from \"../interfaces/ISeeder.sol\";\nimport {Seedable} from \"../randomness/Seedable.sol\";\n\n/// @title RaidParty Raid Contract\n/// @author Hasan Gondal <hasan@afraidlabs.com>\n/// @notice RAIDOOOOOOOOOOOOOOOOOOOOOOOOOOOOR\n\n/**\n *   ___      _    _ ___          _\n *  | _ \\__ _(_)__| | _ \\__ _ _ _| |_ _  _\n *  |   / _` | / _` |  _/ _` | '_|  _| || |\n *  |_|_\\__,_|_\\__,_|_| \\__,_|_|  \\__|\\_, |\n *                                    |__/\n */\n\ncontract Raid is IRaid, Initializable, AccessControlUpgradeable, Seedable {\n    bool public started;\n    bool public halted;\n    bool public bossesCreated;\n\n    uint32 private roundId;\n    uint32 public weightTotal;\n    uint64 public lastSnapshotTime;\n    uint64 private constant PRECISION = 1e18;\n\n    uint256 public seed;\n    uint256 public seedId;\n\n    IParty public party;\n    ISeeder public seeder;\n    IConfetti public confetti;\n\n    Boss[] public bosses;\n    Snapshot[] public snapshots;\n\n    mapping(uint32 => Round) public rounds;\n    mapping(address => Raider) public raiders;\n\n    modifier notHalted() {\n        require(!halted, \"Raid: HALT_ACTIVE\");\n        _;\n    }\n\n    modifier raidActive() {\n        require(started, \"Raid: NOT_STARTED\");\n        _;\n    }\n\n    modifier partyCaller() {\n        require(msg.sender == address(party), \"Raid: NOT_PARTY_CALLER\");\n        _;\n    }\n\n    function initialize(\n        address admin,\n        IParty _party,\n        ISeeder _seeder,\n        IConfetti _confetti\n    ) external initializer {\n        __AccessControl_init();\n        _setupRole(DEFAULT_ADMIN_ROLE, admin);\n\n        party = _party;\n        seeder = _seeder;\n        confetti = _confetti;\n    }\n\n    function setParty(IParty _party) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        party = _party;\n    }\n\n    function setSeeder(ISeeder _seeder) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        seeder = _seeder;\n    }\n\n    function setHalted(bool _halted) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        halted = _halted;\n    }\n\n    function updateSeed() external onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (started) {\n            _syncRounds(uint32(block.number));\n        }\n\n        seed = seeder.getSeedSafe(address(this), seedId);\n    }\n\n    function requestSeed() external onlyRole(DEFAULT_ADMIN_ROLE) {\n        seedId += 1;\n        seeder.requestSeed(seedId);\n    }\n\n    function createBosses(Boss[] calldata _bosses)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        delete bosses;\n        delete weightTotal;\n\n        for (uint256 i; i < _bosses.length; i++) {\n            Boss calldata boss = _bosses[i];\n            weightTotal += boss.weight;\n            bosses.push(boss);\n        }\n\n        bossesCreated = true;\n    }\n\n    function updateBoss(uint32 id, Boss calldata boss)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        require(bosses.length > id, \"Raid::updateBoss: INVALID_BOSS\");\n\n        if (started) {\n            _syncRounds(uint32(block.number));\n        }\n\n        weightTotal -= bosses[id].weight;\n        weightTotal += boss.weight;\n        bosses[id] = boss;\n    }\n\n    function appendBoss(Boss calldata boss)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        if (started) {\n            _syncRounds(uint32(block.number));\n        }\n\n        weightTotal += boss.weight;\n        bosses.push(boss);\n    }\n\n    function manualSync(uint32 maxBlock) external {\n        require(\n            maxBlock > rounds[roundId].finalBlock,\n            \"Raid::manualSync: CANNOT_SYNC_PAST\"\n        );\n\n        _syncRounds(maxBlock);\n    }\n\n    function start() external onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(!started, \"Raid::start: NOT_STARTED\");\n        require(bossesCreated, \"Raid::start: NO_BOSSES_CREATED\");\n\n        seed = seeder.getSeedSafe(address(this), seedId);\n        rounds[roundId] = _rollRound(seed, uint32(block.number));\n\n        started = true;\n        lastSnapshotTime = uint64(block.timestamp);\n    }\n\n    function commitSnapshot() external raidActive {\n        require(\n            block.timestamp >= lastSnapshotTime + 23 hours,\n            \"Raid::commitSnapshot: SNAPSHOT_TOO_RECENT\"\n        );\n\n        _syncRounds(uint32(block.number));\n\n        Snapshot memory snapshot = _createSnapshot();\n        snapshots.push(snapshot);\n\n        lastSnapshotTime = uint64(block.timestamp);\n    }\n\n    function getRaidData() external view returns (RaidData memory data) {\n        uint256 _seed = seed;\n        uint32 _roundId = roundId;\n        Round memory round = rounds[_roundId];\n        while (block.number > round.finalBlock) {\n            _roundId += 1;\n            _seed = _rollSeed(_seed);\n            round = _rollRound(_seed, round.finalBlock + 1);\n        }\n\n        data.boss = round.boss;\n        data.roundId = _roundId;\n        data.health = uint32(round.finalBlock - block.number);\n        data.maxHealth = bosses[round.boss].blockHealth;\n        data.seed = _seed;\n    }\n\n    function getPendingRewards(address user) external view returns (uint256) {\n        Raider memory raider = raiders[user];\n        (, uint256 rewards) = _fetchRewards(raider);\n        return rewards;\n    }\n\n    function updateDamage(address user, uint32 _dpb)\n        external\n        notHalted\n        raidActive\n        partyCaller\n    {\n        Raider storage raider = raiders[user];\n        if (raider.startedAt == 0) {\n            raider.dpb = _dpb;\n            raider.startedAt = uint32(block.number);\n            raider.startBlock = uint32(block.number);\n            raider.startRound = _lazyFetchRoundId(uint32(block.number));\n            raider.startSnapshot = uint32(snapshots.length + 1);\n\n            return;\n        }\n\n        (uint32 _roundId, uint256 rewards) = _fetchRewards(raider);\n\n        raider.startRound = _roundId;\n        raider.pendingRewards = rewards;\n        raider.dpb = _dpb;\n        raider.startBlock = uint32(block.number);\n        raider.startSnapshot = uint32(snapshots.length + 1);\n    }\n\n    function claimRewards(address user) external notHalted {\n        Raider storage raider = raiders[user];\n\n        (uint32 _roundId, uint256 rewards) = _fetchRewards(raider);\n\n        raider.startRound = _roundId;\n        raider.pendingRewards = 0;\n        raider.startBlock = uint32(block.number);\n        raider.startSnapshot = uint32(snapshots.length + 1);\n\n        if (rewards > 0) {\n            confetti.mint(user, rewards);\n        }\n    }\n\n    /** Internal */\n\n    function _rollSeed(uint256 oldSeed) internal pure returns (uint256 rolled) {\n        assembly {\n            mstore(0x00, oldSeed)\n            rolled := keccak256(0x00, 0x20)\n        }\n    }\n\n    function _rollRound(uint256 _seed, uint32 startBlock)\n        internal\n        view\n        returns (Round memory round)\n    {\n        // FIXME: check if we will overflow\n        unchecked {\n            uint32 roll = uint32(_seed % weightTotal);\n            uint256 weight = 0;\n            uint32 _bossWeight;\n\n            for (uint16 bossId; bossId < bosses.length; bossId++) {\n                _bossWeight = bosses[bossId].weight;\n\n                if (roll <= weight + _bossWeight) {\n                    round.boss = bossId;\n                    round.roll = roll;\n                    round.startBlock = startBlock;\n                    round.finalBlock = startBlock + bosses[bossId].blockHealth;\n\n                    return round;\n                }\n\n                weight += _bossWeight;\n            }\n        }\n    }\n\n    function _syncRounds(uint32 maxBlock) internal {\n        // FIXME: check if we will overflow\n        unchecked {\n            Round memory round = rounds[roundId];\n\n            while (\n                block.number > round.finalBlock && maxBlock > round.finalBlock\n            ) {\n                roundId += 1;\n                seed = _rollSeed(seed);\n                round = _rollRound(seed, round.finalBlock + 1);\n                rounds[roundId] = round;\n            }\n        }\n    }\n\n    function _createSnapshot()\n        internal\n        view\n        returns (Snapshot memory snapshot)\n    {\n        uint32 _roundId;\n\n        if (snapshots.length > 0) {\n            _roundId = snapshots[snapshots.length - 1].finalRound + 1;\n        }\n\n        snapshot.initialRound = _roundId;\n        snapshot.initialBlock = rounds[_roundId].startBlock;\n\n        while (_roundId < roundId) {\n            Round memory round = rounds[_roundId];\n            Boss memory boss = bosses[round.boss];\n\n            snapshot.attackDealt +=\n                uint256(boss.blockHealth) *\n                uint256(boss.multiplier);\n\n            _roundId += 1;\n        }\n\n        snapshot.finalRound = _roundId - 1;\n        snapshot.finalBlock = rounds[_roundId - 1].finalBlock;\n    }\n\n    function _fetchRewards(Raider memory raider)\n        internal\n        view\n        returns (uint32, uint256)\n    {\n        if (raider.dpb > 0) {\n            if (snapshots.length > raider.startSnapshot) {\n                (\n                    uint32 _roundId,\n                    uint256 rewards\n                ) = _fetchNewRewardsWithSnapshot(raider);\n                rewards += raider.pendingRewards;\n                return (_roundId, rewards);\n            } else {\n                (uint32 _roundId, uint256 rewards) = _fetchNewRewards(raider);\n                rewards += raider.pendingRewards;\n                return (_roundId, rewards);\n            }\n        }\n\n        return (_lazyFetchRoundId(uint32(block.number)), raider.pendingRewards);\n    }\n\n    function _fetchNewRewards(Raider memory raider)\n        internal\n        view\n        returns (uint32 _roundId, uint256 rewards)\n    {\n        // FIXME: check if we will overflow\n        unchecked {\n            Boss memory boss;\n            Round memory round;\n\n            uint256 _seed = seed;\n\n            if (raider.startRound <= roundId) {\n                _roundId = raider.startRound;\n                for (_roundId; _roundId <= roundId; _roundId++) {\n                    round = rounds[_roundId];\n                    boss = bosses[round.boss];\n                    rewards += _roundReward(raider, round, boss);\n                }\n                _roundId -= 1;\n            } else {\n                _roundId = roundId;\n                round = rounds[_roundId];\n            }\n\n            while (block.number > round.finalBlock) {\n                _roundId += 1;\n                _seed = _rollSeed(_seed);\n                round = _rollRound(_seed, round.finalBlock + 1);\n                boss = bosses[round.boss];\n\n                if (_roundId >= raider.startRound) {\n                    rewards += _roundReward(raider, round, boss);\n                }\n            }\n        }\n    }\n\n    function _fetchNewRewardsWithSnapshot(Raider memory raider)\n        internal\n        view\n        returns (uint32 _roundId, uint256 rewards)\n    {\n        // FIXME: check if we will overflow\n        unchecked {\n            Boss memory boss;\n            Round memory round;\n\n            _roundId = raider.startRound;\n            uint256 _snapshotId = raider.startSnapshot;\n            uint32 _lastRound = snapshots[_snapshotId].initialRound;\n\n            for (_roundId; _roundId < _lastRound; _roundId++) {\n                round = rounds[_roundId];\n                boss = bosses[round.boss];\n                rewards += _roundReward(raider, round, boss);\n            }\n\n            for (_snapshotId; _snapshotId < snapshots.length; _snapshotId++) {\n                rewards += snapshots[_snapshotId].attackDealt * raider.dpb;\n                _roundId = snapshots[_snapshotId].finalRound;\n                round = rounds[_roundId];\n            }\n\n            uint256 _seed = seed;\n            while (block.number > round.finalBlock) {\n                _roundId += 1;\n                _seed = _rollSeed(_seed);\n                round = _rollRound(_seed, round.finalBlock + 1);\n                boss = bosses[round.boss];\n                rewards += _roundReward(raider, round, boss);\n            }\n        }\n    }\n\n    function _lazyFetchRoundId(uint32 maxBlock)\n        internal\n        view\n        returns (uint32 _roundId)\n    {\n        // FIXME: check if we will overflow\n        unchecked {\n            _roundId = roundId;\n            Round memory round = rounds[_roundId];\n            uint256 _seed = seed;\n            while (maxBlock > round.finalBlock) {\n                _roundId += 1;\n                _seed = _rollSeed(_seed);\n                round = _rollRound(_seed, round.finalBlock + 1);\n            }\n        }\n    }\n\n    function _roundReward(\n        Raider memory raider,\n        Round memory round,\n        Boss memory boss\n    ) internal view returns (uint256 reward) {\n        // edge cases -\n        // User joins mid round;\n        // User joins and leaves mid round;\n        // User leaves mid round;\n        unchecked {\n            uint256 blocksDefeated = boss.blockHealth;\n\n            if (\n                round.finalBlock > block.number &&\n                raider.startBlock > round.startBlock\n            ) {\n                blocksDefeated = block.number - raider.startBlock;\n            } else if (\n                raider.startBlock > round.startBlock &&\n                round.finalBlock >= raider.startBlock\n            ) {\n                blocksDefeated = round.finalBlock - raider.startBlock;\n            } else if (\n                round.finalBlock > block.number &&\n                raider.startBlock >= block.number\n            ) {\n                blocksDefeated = block.number - round.startBlock;\n            }\n\n            reward =\n                (1e18 *\n                    uint256(blocksDefeated) *\n                    uint256(boss.multiplier) *\n                    uint256(raider.dpb)) /\n                PRECISION;\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IConfetti.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IConfetti is IERC20 {\n    function mint(address to, uint256 amount) external;\n\n    function burn(uint256 amount) external;\n}\n"
    },
    "contracts/interfaces/IParty.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../lib/Stats.sol\";\n\ninterface IParty {\n    event Equipped(address indexed user, uint8 item, uint8 slot, uint256 id);\n\n    event Unequipped(address indexed user, uint8 item, uint8 slot, uint256 id);\n\n    event DamageUpdated(address indexed user, uint32 damageCurr);\n\n    struct PartyData {\n        uint256 hero;\n        mapping(uint256 => uint256) fighters;\n    }\n\n    struct Action {\n        ActionType action;\n        uint256 id;\n        uint8 slot;\n    }\n\n    enum Property {\n        HERO,\n        FIGHTER\n    }\n\n    enum ActionType {\n        UNEQUIP,\n        EQUIP\n    }\n\n    function act(\n        Action[] calldata heroActions,\n        Action[] calldata fighterActions\n    ) external;\n\n    function equip(\n        Property item,\n        uint256 id,\n        uint8 slot\n    ) external;\n\n    function unequip(Property item, uint8 slot) external;\n\n    function enhance(\n        Property item,\n        uint8 slot,\n        uint256 burnTokenId\n    ) external;\n\n    function getUserHero(address user) external view returns (uint256);\n\n    function getUserFighters(address user)\n        external\n        view\n        returns (uint256[] memory);\n\n    function getDamage(address user) external view returns (uint32);\n}\n"
    },
    "contracts/interfaces/IRaid.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IRaid {\n    struct Round {\n        uint16 boss;\n        uint32 roll;\n        uint32 startBlock;\n        uint32 finalBlock;\n    }\n\n    struct Raider {\n        uint32 dpb;\n        uint32 startedAt;\n        uint32 startBlock;\n        uint32 startRound;\n        uint32 startSnapshot;\n        uint256 pendingRewards;\n    }\n\n    struct Boss {\n        uint32 weight;\n        uint32 blockHealth;\n        uint128 multiplier;\n    }\n\n    struct Snapshot {\n        uint32 initialBlock;\n        uint32 initialRound;\n        uint32 finalBlock;\n        uint32 finalRound;\n        uint256 attackDealt;\n    }\n\n    struct RaidData {\n        uint16 boss;\n        uint32 roundId;\n        uint32 health;\n        uint32 maxHealth;\n        uint256 seed;\n    }\n\n    function updateDamage(address user, uint32 _dpb) external;\n}\n"
    },
    "contracts/interfaces/ISeeder.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../lib/Randomness.sol\";\n\ninterface ISeeder {\n    event Requested(address indexed origin, uint256 indexed identifier);\n\n    event Seeded(bytes32 identifier, uint256 randomness);\n\n    function getIdReferenceCount(\n        bytes32 randomnessId,\n        address origin,\n        uint256 startIdx\n    ) external view returns (uint256);\n\n    function getIdentifiers(\n        bytes32 randomnessId,\n        address origin,\n        uint256 startIdx,\n        uint256 count\n    ) external view returns (uint256[] memory);\n\n    function requestSeed(uint256 identifier) external;\n\n    function getSeed(address origin, uint256 identifier)\n        external\n        view\n        returns (uint256);\n\n    function getSeedSafe(address origin, uint256 identifier)\n        external\n        view\n        returns (uint256);\n\n    function executeRequestMulti() external;\n\n    function isSeeded(address origin, uint256 identifier)\n        external\n        view\n        returns (bool);\n\n    function setFee(uint256 fee) external;\n\n    function getFee() external view returns (uint256);\n\n    function getData(address origin, uint256 identifier)\n        external\n        view\n        returns (Randomness.SeedData memory);\n}\n"
    },
    "contracts/lib/Randomness.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nlibrary Randomness {\n    struct SeedData {\n        uint256 batch;\n        bytes32 randomnessId;\n    }\n}\n"
    },
    "contracts/lib/Stats.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nlibrary Stats {\n    struct HeroStats {\n        uint8 dmgMultiplier;\n        uint8 partySize;\n        uint8 enhancement;\n    }\n\n    struct FighterStats {\n        uint32 dmg;\n        uint8 enhancement;\n    }\n\n    struct EquipmentStats {\n        uint32 dmg;\n        uint8 dmgMultiplier;\n        uint8 slot;\n    }\n}\n"
    },
    "contracts/randomness/Seedable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n/// @title RaidParty Helper Contract for Seedability\n\n/**\n *   ___      _    _ ___          _\n *  | _ \\__ _(_)__| | _ \\__ _ _ _| |_ _  _\n *  |   / _` | / _` |  _/ _` | '_|  _| || |\n *  |_|_\\__,_|_\\__,_|_| \\__,_|_|  \\__|\\_, |\n *                                    |__/\n */\n\npragma solidity ^0.8.0;\n\nabstract contract Seedable {\n    function _validateSeed(uint256 id) internal pure {\n        require(id != 0, \"Seedable: not seeded\");\n    }\n}\n"
    }
  }
}}