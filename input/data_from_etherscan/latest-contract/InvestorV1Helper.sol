{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/InvestorV1Helper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport './interfaces/IInvestorV1Factory.sol';\nimport './interfaces/IInvestorV1Pool.sol';\n\n\ncontract InvestorV1Helper {\n    struct PoolInfo {\n        address pooladdr;\n        string  name;\n        string status;\n        uint256 capacity;\n        uint256 funded;\n        uint256 exited;\n        uint256 staked;\n        uint256 oraclePrice;\n        uint24 apy;\n        uint24 fee;\n        uint256 mystake;\n        uint256 myfund;\n        uint256 myrevenue;\n        bool claimed;\n    }\n\n    address public factory;\n    address public owner;\n\n    address public constant HSF = 0xbA6B0dbb2bA8dAA8F5D6817946393Aef8D3A4487;\n    address public constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\n\n    constructor(address _factory) {\n        factory = _factory;\n        owner = msg.sender;\n    }\n\n    function setOwner(address _owner) public {\n        require(msg.sender == owner, \"InvestorV1Helper: not owner\");\n        owner = _owner;\n    }\n\n    function setFactory(address _factory) public {\n        require(msg.sender == owner, \"InvestorV1Helper: not owner\");\n        factory = _factory;\n    }\n\n    function getAllPools(address _account) public view returns (PoolInfo[] memory) {\n        uint256 poolLen = IInvestorV1Factory(factory).pools();\n        PoolInfo[] memory pl = new PoolInfo[](poolLen);\n        for(uint i=0; i<poolLen; i++) {\n            address targetPool = IInvestorV1Factory(factory).poolList(i);\n            pl[i] = PoolInfo({\n                pooladdr: targetPool,\n                name: IInvestorV1Pool(targetPool).name(),\n                status: IInvestorV1Pool(targetPool).getPoolState(),\n                capacity: IInvestorV1Pool(targetPool).capacity(),\n                funded: IInvestorV1Pool(targetPool).funded(),\n                exited: IInvestorV1Pool(targetPool).exited(),\n                staked: IInvestorV1Pool(targetPool).restaked(),\n                oraclePrice: IInvestorV1Pool(targetPool).oraclePrice(),\n                apy: IInvestorV1Pool(targetPool).interestRate(),\n                fee: IInvestorV1Pool(targetPool).fee(),\n                mystake: IInvestorV1Pool(targetPool).restakeAmt(_account),\n                myfund: IInvestorV1Pool(targetPool).pooledAmt(_account),\n                myrevenue: IInvestorV1Pool(targetPool).expectedRevenue(_account),\n                claimed:  IInvestorV1Pool(targetPool).claimed(_account)\n            });\n        }\n        return pl;\n    }\n}"
    },
    "contracts/interfaces/IInvestorV1Factory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\ninterface IInvestorV1Factory {\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\n    event DAOChanged(address indexed oldDAO, address indexed newDAO);\n\n    event PoolCreated(\n        address operator,\n        string name,\n        uint256 fundId,\n        uint256 capacity,\n        uint256 startTime,\n        uint256 stageTime,\n        uint256 endTime,\n        uint24 fee,\n        uint24 interestRate,\n        address pool\n    );\n\n    function owner() external view returns (address); \n    function dao() external view returns (address); \n\n    function pools() external view returns (uint256);\n\n    function poolList(uint256 index) external view returns (address);\n\n    function createPool(\n        address operator,\n        string memory name,\n        uint256 capacity,\n        uint256 oraclePrice,\n        uint256 startTime,\n        uint256 stageTime,\n        uint256 endTime,\n        uint24 fee,\n        uint24 interestRate\n    ) external returns (address pool);\n\n    function setOwner(address _owner) external;\n    function setDAO(address _dao) external;\n}"
    },
    "contracts/interfaces/IInvestorV1Pool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\nimport './IInvestorV1PoolImmutables.sol';\nimport './IInvestorV1PoolState.sol';\nimport './IInvestorV1PoolDerivedState.sol';\nimport './IInvestorV1PoolActions.sol';\nimport './IInvestorV1PoolOperatorActions.sol';\nimport './IInvestorV1PoolEvents.sol';\n\ninterface IInvestorV1Pool is \n    IInvestorV1PoolImmutables,\n    IInvestorV1PoolState,\n    IInvestorV1PoolDerivedState,\n    IInvestorV1PoolActions,\n    IInvestorV1PoolOperatorActions,\n    IInvestorV1PoolEvents \n{\n\n}"
    },
    "contracts/interfaces/IInvestorV1PoolActions.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\ninterface IInvestorV1PoolActions {\n    function update() external returns (bool);\n    function deposit(uint256 amount) external returns (bool);\n    function withdraw(uint256 amount, address to) external returns (bool);\n    function exit(uint256 amount, address to) external returns (bool);\n    function claim(address to) external returns (bool);\n    function restake(uint256 amount) external returns (bool);\n    function unstake(uint256 amount, address to) external returns (bool);\n}"
    },
    "contracts/interfaces/IInvestorV1PoolDerivedState.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\ninterface IInvestorV1PoolDerivedState {\n    function expectedRestakeRevenue(uint256 amount) external view returns (uint256);\n    function expectedRevenue(address _account) external view returns (uint256);\n}"
    },
    "contracts/interfaces/IInvestorV1PoolEvents.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\ninterface IInvestorV1PoolEvents {\n    event PoolOpened(address operator, uint256 startTime, uint256 tokenDeposit);\n    event PoolActiviated(uint256 funded);\n    event PoolLiquidated(uint256 liquidityFund);\n    event PoolDishonored(uint256 requiredFund, uint256 liquidityFund);\n    event PoolReverted(uint256 minCapacity, uint256 funded);\n\n    event OraclePriceChanged(uint256 oraclePrice);\n    event PoolDetailLinkChanged(string link);\n    event ColletralHashChanged(string oldHash, string newHash);\n    event ColletralLinkChanged(string oldLink, string newLink);\n\n    event Deposit(address token, address from, uint256 amount);\n    event Withdrawal(address token, address from, address to, uint256 amount);\n    event Claim(address from, address to, uint256 amount);\n    event Exited(address from, address to, uint256 amount);\n}"
    },
    "contracts/interfaces/IInvestorV1PoolImmutables.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\ninterface IInvestorV1PoolImmutables {\n    function factory() external view returns (address);\n    function operator() external view returns (address);\n    function name() external view returns (string memory);\n    function capacity() external view returns (uint256);\n    function fundId() external view returns (uint256);\n    function startTime() external view returns (uint256);\n    function stageTime() external view returns (uint256);\n    function endTime() external view returns (uint256);\n    function fee() external view returns (uint24);\n    function interestRate() external view returns (uint24);\n}"
    },
    "contracts/interfaces/IInvestorV1PoolOperatorActions.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\ninterface IInvestorV1PoolOperatorActions {\n    function setOraclePrice(uint256 _oraclePrice) external returns (bool);\n    function setColletralHash(string memory _newHash) external returns (bool);\n    function setColletralLink(string memory _newLink) external returns (bool);\n    function setPoolDetailLink(string memory _newLink) external returns (bool);\n    function rescue(address target) external returns (bool);\n    function pullDeposit() external returns (bool);\n    function liquidate() external returns (bool);\n    function openPool() external returns (bool);\n    function closePool() external returns (bool);\n    function revertPool() external returns (bool);\n}"
    },
    "contracts/interfaces/IInvestorV1PoolState.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\ninterface IInvestorV1PoolState {\n    function funded() external view returns (uint256);\n    function exited() external view returns (uint256);\n    function restaked() external view returns (uint256);\n    function oraclePrice() external view returns (uint256);\n    function getPoolState() external view returns (string memory);\n    function pooledAmt(address user) external view returns (uint256);\n    function restakeAmt(address user) external view returns (uint256);\n    function claimed(address user) external view returns (bool);\n    function collateralDocument() external view returns (string memory);\n    function detailLink() external view returns (string memory);\n    function collateralHash() external view returns (string memory);\n    function depositors() external view returns (uint256);\n    function restakers() external view returns (uint256);\n    function depositorList(uint256 index) external view returns (address);\n    function restakerList(uint256 index) external view returns (address);\n    function getInfo(address _account) external view returns (string memory, string memory, uint256, uint256, uint256, uint256, uint256, uint24);\n    function getExtra() external view returns (address, uint256, uint256, uint256, string memory, string memory, string memory);\n}"
    }
  }
}}